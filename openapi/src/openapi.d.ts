/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/_health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description healthcheck endpoint */
        get: operations["getHealthCheck"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description homepage endpoint */
        get: operations["home"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Client creation endpoint */
        post: operations["createClient"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/providerAuth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Client creation or login endpoint for credentials from provider */
        post: operations["providerAuth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Client login endpoint */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Client jwt check endpoint */
        get: operations["me"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Client get endpoint */
        get: operations["getClient"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/updateMetadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Client metadata update endpoint */
        patch: operations["updateMetadata"];
        trace?: never;
    };
    "/client/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Client delete endpoint */
        delete: operations["deleteClient"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/txn/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Transaction send endpoint */
        post: operations["send"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/txn/get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Transaction get by hash endpoint */
        get: operations["getTxn"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/txn/getMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get Transactions based on networks and count endpoint */
        get: operations["getMany"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/txn/getAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all Transaction for client endpoint */
        get: operations["getAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/address/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Address get endpoint */
        get: operations["getAddress"];
        put?: never;
        /** @description Address creation endpoint */
        post: operations["createAddress"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/address/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Address update endpoint */
        patch: operations["update"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        HealthCheck: {
            uptime?: number;
            message?: string;
            /** Format: int64 */
            timestamp?: number;
        };
        ReturnCreatedClient: {
            id?: string | Record<string, never>;
            jwt?: string;
            /** @enum {string} */
            status?: "ok" | "error";
            username?: string;
            email?: string;
            mobile?: number | Record<string, never>;
            firstname?: string | Record<string, never>;
            lastname?: string | Record<string, never>;
            password?: string;
            address?: {
                eth?: Record<string, never> | string;
                sol?: Record<string, never> | string;
                bitcoin?: Record<string, never> | string;
                usdc?: Record<string, never> | string;
            } & (Record<string, never> | Record<string, never>);
        };
        CreateClient: {
            username: string;
            email: string;
            mobile?: number | Record<string, never>;
            firstname?: string | Record<string, never>;
            lastname?: string | Record<string, never>;
            password: string;
        };
        LoginClient: {
            email?: string;
            password?: string;
        };
        Error: {
            /** @enum {string} */
            status?: "error";
            msg?: string;
        };
        SolTransactionData: {
            /** @description Time at which the block was created */
            blockTime?: number;
            /** @description Metadata related to the transaction */
            meta?: {
                /** @description Number of compute units consumed */
                computeUnitsConsumed?: number;
                /** @description Transaction fee */
                fee?: number;
                /** @description Log messages related to the transaction */
                logMessages?: string[];
                /** @description Balances after the transaction */
                postBalances?: number[];
                /** @description Balances before the transaction */
                preBalances?: number[];
                /** @description Status of the transaction */
                status?: {
                    Ok?: Record<string, never>;
                };
            };
            /** @description Slot number of the transaction */
            slot?: number;
            /** @description Transaction details */
            transaction?: {
                /** @description Message details of the transaction */
                message?: {
                    /** @description Header of the transaction message */
                    header?: {
                        /** @description Number of readonly signed accounts */
                        numReadonlySignedAccounts?: number;
                        /** @description Number of readonly unsigned accounts */
                        numReadonlyUnsignedAccounts?: number;
                        /** @description Number of required signatures */
                        numRequiredSignatures?: number;
                    };
                    /** @description Account keys involved in the transaction */
                    accountKeys?: string[];
                    /** @description Recent blockhash used in the transaction */
                    recentBlockhash?: string;
                    /** @description Instructions for the transaction */
                    instructions?: {
                        /** @description Accounts involved in the instruction */
                        accounts?: number[];
                        /** @description Data for the instruction */
                        data?: string;
                        /** @description Index of the program ID */
                        programIdIndex?: number;
                    }[];
                };
                /** @description Signatures of the transaction */
                signatures?: string[];
            };
        };
        EthTxnResponse: {
            /** @description Type of the transaction receipt */
            _type?: string;
            /** @description List of access lists */
            accessList?: unknown[];
            /** @description The block number */
            blockNumber?: number;
            /** @description The block hash */
            blockHash?: string;
            /** @description The chain ID */
            chainId?: string;
            /** @description The transaction data */
            data?: string;
            /** @description The sender address */
            from?: string;
            /** @description The gas limit */
            gasLimit?: string;
            /** @description The gas price */
            gasPrice?: string;
            /** @description The transaction hash */
            hash?: string;
            /** @description The maximum fee per gas */
            maxFeePerGas?: string;
            /** @description The maximum priority fee per gas */
            maxPriorityFeePerGas?: string;
            /** @description The nonce */
            nonce?: number;
            /** @description The transaction signature */
            signature?: {
                /** @description Type of the signature */
                _type?: string;
                /** @description Network version */
                networkV?: Record<string, never>;
                /** @description The R value of the signature */
                r?: string;
                /** @description The S value of the signature */
                s?: string;
                /** @description The V value of the signature */
                v?: number;
            };
            /** @description The recipient address */
            to?: string;
            /** @description The transaction type */
            type?: number;
            /** @description The transaction value */
            value?: string;
        };
        /** @enum {string} */
        Network: "sol" | "eth" | "bitcoin" | "usdc";
        RegexAddress: string;
        TransactionSendQuery: {
            from?: components["schemas"]["RegexAddress"];
            to?: components["schemas"]["RegexAddress"];
            amount?: string;
            network?: components["schemas"]["Network"];
            cluster?: components["schemas"]["EthCluster"] | components["schemas"]["Cluster"] | components["schemas"]["BitcoinCluster"] | components["schemas"]["USDCCluster"];
        };
        TxnGetQueryByHash: {
            network?: components["schemas"]["Network"];
            sign?: string;
        };
        TxnGetResponseByHash: {
            /** @enum {string} */
            status?: "ok";
            txn?: components["schemas"]["TxnType"];
        };
        TxnType: {
            id?: string;
            time?: string;
            clientId?: string;
            blockTime?: number;
            amount?: number;
            fee?: number;
            from?: string;
            to?: string;
            postBalances?: number[] | null;
            preBalances?: number[] | null;
            recentBlockhash?: string;
            signature?: string[];
            network?: components["schemas"]["Network"];
            slot?: number | null;
            nonce?: number | null;
            chainId?: number;
            cluster?: components["schemas"]["EthCluster"] | components["schemas"]["Cluster"] | components["schemas"]["BitcoinCluster"] | components["schemas"]["USDCCluster"];
        };
        /** @enum {string} */
        EthCluster: "mainnet" | "ropsten" | "rinkeby" | "goerli" | "kovan" | "sepolia";
        /** @enum {string} */
        Cluster: "devnet" | "testnet" | "mainnet-beta";
        /** @enum {string} */
        BitcoinCluster: "mainnet" | "testnet" | "regtest";
        /** @enum {string} */
        USDCCluster: "ethereum_mainnet" | "ethereum_ropsten" | "ethereum_rinkeby" | "ethereum_testnet" | "ethereum_local" | "other";
        TxnArray: components["schemas"]["TxnType"][];
        AddressType: {
            eth?: string;
            sol?: string;
            bitcoin?: string | null;
            usdc?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getHealthCheck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthCheck"];
                };
            };
        };
    };
    home: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthCheck"];
                };
            };
        };
    };
    createClient: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Client object that needs to be added */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateClient"];
            };
        };
        responses: {
            /** @description created client */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReturnCreatedClient"];
                };
            };
            /** @description Client already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error (jwt) */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Database Service Unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    providerAuth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Client object that needs to be added */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateClient"];
            };
        };
        responses: {
            /** @description created client */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReturnCreatedClient"];
                };
            };
            /** @description Client Found from cache */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReturnCreatedClient"];
                };
            };
            /** @description Internal server error (jwt) */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Database Service Unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Login Data for client */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["LoginClient"];
            };
        };
        responses: {
            /** @description Client Found from cache */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReturnCreatedClient"];
                };
            };
            /** @description Wrong password */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description client not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error (jwt) */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Database Service Unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    me: {
        parameters: {
            query?: never;
            header: {
                /** @description Access token for authentication */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Client Found from cache */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReturnCreatedClient"];
                };
            };
            /** @description Wrong password */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Auth Error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description client not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error (jwt) */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Database Service Unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getClient: {
        parameters: {
            query?: never;
            header: {
                /** @description Access token for authentication */
                Authorization: string;
            };
            path: {
                /** @description The username of the client to retrieve */
                username: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReturnCreatedClient"];
                };
            };
            /** @description Auth Error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Client Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error (jwt) */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Database Service Unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updateMetadata: {
        parameters: {
            query?: never;
            header: {
                /** @description Access token for authentication */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        /** @description Client firstname lastname that needs to be updated */
        requestBody?: {
            content: {
                "application/json": {
                    firstname: string;
                    lastname: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status?: string;
                        msg?: string;
                    };
                };
            };
            /** @description Auth Error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error (jwt) */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Database Service Unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteClient: {
        parameters: {
            query?: never;
            header: {
                /** @description Access token for authentication */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        status?: "ok";
                        /** @enum {string} */
                        msg?: "client deleted";
                    };
                };
            };
            /** @description Auth Error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error (jwt) */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Database Service Unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    send: {
        parameters: {
            query: {
                /** @description The Transaction query object */
                TransactionSend: components["schemas"]["TransactionSendQuery"];
            };
            header: {
                /** @description Access token for authentication */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        /** @description Transaction object that needs to be added */
        requestBody?: {
            content: {
                "application/json": {
                    to: string;
                    amount: number;
                    currency: string;
                    note?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        status?: "ok";
                        signature?: components["schemas"]["SolTransactionData"] | components["schemas"]["EthTxnResponse"];
                    };
                };
            };
            /** @description Transaction failed error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Auth Error or Address validation error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error (jwt) */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Database Service Unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getTxn: {
        parameters: {
            query: {
                /** @description The Get Transaction query object */
                txnHash: components["schemas"]["TxnGetQueryByHash"];
            };
            header: {
                /** @description Access token for authentication */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Transaction from database */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TxnGetResponseByHash"];
                };
            };
            /** @description Get the transaction from cache */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TxnGetResponseByHash"];
                };
            };
            /** @description Auth Error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Transaction Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error (jwt) */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Database Service Unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getMany: {
        parameters: {
            query: {
                /** @description Network/s and counts Transaction query object */
                txnQuery: {
                    networks?: components["schemas"]["Network"] | components["schemas"]["Network"][];
                    /** @description Count representing the number of transactions required */
                    count?: number;
                };
            };
            header: {
                /** @description Access token for authentication */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Some client transaction response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        status?: "ok";
                        txns?: components["schemas"]["TxnArray"];
                    };
                };
            };
            /** @description Auth Error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error (jwt) */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Database Service Unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getAll: {
        parameters: {
            query?: never;
            header: {
                /** @description Access token for authentication */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get all the client transaction response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        status?: "ok";
                        txns?: components["schemas"]["TxnArray"];
                    };
                };
            };
            /** @description Auth Error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error (jwt) */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Database Service Unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getAddress: {
        parameters: {
            query?: never;
            header: {
                /** @description Access token for authentication */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        status?: "ok";
                        address?: components["schemas"]["AddressType"];
                    };
                };
            };
            /** @description OK */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        status?: "ok";
                        address?: components["schemas"]["AddressType"];
                    };
                };
            };
            /** @description Auth Error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Address Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error (jwt) */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Database Service Unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createAddress: {
        parameters: {
            query?: never;
            header: {
                /** @description Access token for authentication */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        /** @description Address object that needs to be added */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AddressType"];
            };
        };
        responses: {
            /** @description created address */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        status?: "ok";
                        id?: string;
                    };
                };
            };
            /** @description Incomplete request object */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Address validation error response */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Address already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error (jwt) */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Database Service Unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    update: {
        parameters: {
            query?: never;
            header: {
                /** @description Access token for authentication */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        /** @description Address object that needs to be updated */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AddressType"];
            };
        };
        responses: {
            /** @description address updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        status?: "ok";
                        id?: string;
                    };
                };
            };
            /** @description Auth Error */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Address already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error (jwt) */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Database Service Unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
}
