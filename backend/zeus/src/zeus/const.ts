/* eslint-disable */

export const AllTypesProps: Record<string, any> = {
  Boolean_comparison_exp: {},
  Int_comparison_exp: {},
  String_comparison_exp: {},
  account_aggregate_bool_exp: {
    count: "account_aggregate_bool_exp_count",
  },
  account_aggregate_bool_exp_count: {
    arguments: "account_select_column",
    filter: "account_bool_exp",
    predicate: "Int_comparison_exp",
  },
  account_aggregate_fields: {
    count: {
      columns: "account_select_column",
    },
  },
  account_aggregate_order_by: {
    count: "order_by",
    max: "account_max_order_by",
    min: "account_min_order_by",
  },
  account_arr_rel_insert_input: {
    data: "account_insert_input",
    on_conflict: "account_on_conflict",
  },
  account_bool_exp: {
    _and: "account_bool_exp",
    _not: "account_bool_exp",
    _or: "account_bool_exp",
    bitcoin: "bitcoin_bool_exp",
    client: "client_bool_exp",
    clientId: "uuid_comparison_exp",
    createdAt: "timestamptz_comparison_exp",
    eth: "eth_bool_exp",
    id: "uuid_comparison_exp",
    img: "String_comparison_exp",
    name: "String_comparison_exp",
    sol: "sol_bool_exp",
    updatedAt: "timestamptz_comparison_exp",
    wallet: "wallet_bool_exp",
    walletId: "uuid_comparison_exp",
  },
  account_constraint: "enum" as const,
  account_insert_input: {
    bitcoin: "bitcoin_obj_rel_insert_input",
    client: "client_obj_rel_insert_input",
    clientId: "uuid",
    createdAt: "timestamptz",
    eth: "eth_obj_rel_insert_input",
    id: "uuid",
    sol: "sol_obj_rel_insert_input",
    updatedAt: "timestamptz",
    wallet: "wallet_obj_rel_insert_input",
    walletId: "uuid",
  },
  account_max_order_by: {
    clientId: "order_by",
    createdAt: "order_by",
    id: "order_by",
    img: "order_by",
    name: "order_by",
    updatedAt: "order_by",
    walletId: "order_by",
  },
  account_min_order_by: {
    clientId: "order_by",
    createdAt: "order_by",
    id: "order_by",
    img: "order_by",
    name: "order_by",
    updatedAt: "order_by",
    walletId: "order_by",
  },
  account_obj_rel_insert_input: {
    data: "account_insert_input",
    on_conflict: "account_on_conflict",
  },
  account_on_conflict: {
    constraint: "account_constraint",
    update_columns: "account_update_column",
    where: "account_bool_exp",
  },
  account_order_by: {
    bitcoin: "bitcoin_order_by",
    client: "client_order_by",
    clientId: "order_by",
    createdAt: "order_by",
    eth: "eth_order_by",
    id: "order_by",
    img: "order_by",
    name: "order_by",
    sol: "sol_order_by",
    updatedAt: "order_by",
    wallet: "wallet_order_by",
    walletId: "order_by",
  },
  account_pk_columns_input: {
    id: "uuid",
  },
  account_select_column: "enum" as const,
  account_set_input: {
    clientId: "uuid",
    createdAt: "timestamptz",
    id: "uuid",
    updatedAt: "timestamptz",
    walletId: "uuid",
  },
  account_stream_cursor_input: {
    initial_value: "account_stream_cursor_value_input",
    ordering: "cursor_ordering",
  },
  account_stream_cursor_value_input: {
    clientId: "uuid",
    createdAt: "timestamptz",
    id: "uuid",
    updatedAt: "timestamptz",
    walletId: "uuid",
  },
  account_update_column: "enum" as const,
  account_updates: {
    _set: "account_set_input",
    where: "account_bool_exp",
  },
  address_aggregate_fields: {
    count: {
      columns: "address_select_column",
    },
  },
  address_bool_exp: {
    _and: "address_bool_exp",
    _not: "address_bool_exp",
    _or: "address_bool_exp",
    bitcoin: "String_comparison_exp",
    client: "client_bool_exp",
    client_id: "uuid_comparison_exp",
    createdAt: "timestamptz_comparison_exp",
    eth: "String_comparison_exp",
    id: "uuid_comparison_exp",
    sol: "String_comparison_exp",
    updatedAt: "timestamptz_comparison_exp",
    usdc: "String_comparison_exp",
  },
  address_constraint: "enum" as const,
  address_insert_input: {
    client: "client_obj_rel_insert_input",
    client_id: "uuid",
    createdAt: "timestamptz",
    id: "uuid",
    updatedAt: "timestamptz",
  },
  address_obj_rel_insert_input: {
    data: "address_insert_input",
    on_conflict: "address_on_conflict",
  },
  address_on_conflict: {
    constraint: "address_constraint",
    update_columns: "address_update_column",
    where: "address_bool_exp",
  },
  address_order_by: {
    bitcoin: "order_by",
    client: "client_order_by",
    client_id: "order_by",
    createdAt: "order_by",
    eth: "order_by",
    id: "order_by",
    sol: "order_by",
    updatedAt: "order_by",
    usdc: "order_by",
  },
  address_pk_columns_input: {
    id: "uuid",
  },
  address_select_column: "enum" as const,
  address_set_input: {
    client_id: "uuid",
    createdAt: "timestamptz",
    id: "uuid",
    updatedAt: "timestamptz",
  },
  address_stream_cursor_input: {
    initial_value: "address_stream_cursor_value_input",
    ordering: "cursor_ordering",
  },
  address_stream_cursor_value_input: {
    client_id: "uuid",
    createdAt: "timestamptz",
    id: "uuid",
    updatedAt: "timestamptz",
  },
  address_update_column: "enum" as const,
  address_updates: {
    _set: "address_set_input",
    where: "address_bool_exp",
  },
  bigint: `scalar.bigint` as const,
  bigint_comparison_exp: {
    _eq: "bigint",
    _gt: "bigint",
    _gte: "bigint",
    _in: "bigint",
    _lt: "bigint",
    _lte: "bigint",
    _neq: "bigint",
    _nin: "bigint",
  },
  bitcoin_aggregate_fields: {
    count: {
      columns: "bitcoin_select_column",
    },
  },
  bitcoin_bool_exp: {
    _and: "bitcoin_bool_exp",
    _not: "bitcoin_bool_exp",
    _or: "bitcoin_bool_exp",
    account: "account_bool_exp",
    accountId: "uuid_comparison_exp",
    createdAt: "timestamptz_comparison_exp",
    id: "uuid_comparison_exp",
    mainnetBtc: "float8_comparison_exp",
    privateKey: "String_comparison_exp",
    publicKey: "String_comparison_exp",
    regtestBtc: "float8_comparison_exp",
    textnetBtc: "float8_comparison_exp",
    updatedAt: "timestamptz_comparison_exp",
  },
  bitcoin_constraint: "enum" as const,
  bitcoin_inc_input: {
    mainnetBtc: "float8",
    regtestBtc: "float8",
    textnetBtc: "float8",
  },
  bitcoin_insert_input: {
    account: "account_obj_rel_insert_input",
    accountId: "uuid",
    createdAt: "timestamptz",
    id: "uuid",
    mainnetBtc: "float8",
    regtestBtc: "float8",
    textnetBtc: "float8",
    updatedAt: "timestamptz",
  },
  bitcoin_obj_rel_insert_input: {
    data: "bitcoin_insert_input",
    on_conflict: "bitcoin_on_conflict",
  },
  bitcoin_on_conflict: {
    constraint: "bitcoin_constraint",
    update_columns: "bitcoin_update_column",
    where: "bitcoin_bool_exp",
  },
  bitcoin_order_by: {
    account: "account_order_by",
    accountId: "order_by",
    createdAt: "order_by",
    id: "order_by",
    mainnetBtc: "order_by",
    privateKey: "order_by",
    publicKey: "order_by",
    regtestBtc: "order_by",
    textnetBtc: "order_by",
    updatedAt: "order_by",
  },
  bitcoin_pk_columns_input: {
    id: "uuid",
  },
  bitcoin_select_column: "enum" as const,
  bitcoin_set_input: {
    accountId: "uuid",
    createdAt: "timestamptz",
    id: "uuid",
    mainnetBtc: "float8",
    regtestBtc: "float8",
    textnetBtc: "float8",
    updatedAt: "timestamptz",
  },
  bitcoin_stream_cursor_input: {
    initial_value: "bitcoin_stream_cursor_value_input",
    ordering: "cursor_ordering",
  },
  bitcoin_stream_cursor_value_input: {
    accountId: "uuid",
    createdAt: "timestamptz",
    id: "uuid",
    mainnetBtc: "float8",
    regtestBtc: "float8",
    textnetBtc: "float8",
    updatedAt: "timestamptz",
  },
  bitcoin_update_column: "enum" as const,
  bitcoin_updates: {
    _inc: "bitcoin_inc_input",
    _set: "bitcoin_set_input",
    where: "bitcoin_bool_exp",
  },
  chat_aggregate_bool_exp: {
    count: "chat_aggregate_bool_exp_count",
  },
  chat_aggregate_bool_exp_count: {
    arguments: "chat_select_column",
    filter: "chat_bool_exp",
    predicate: "Int_comparison_exp",
  },
  chat_aggregate_fields: {
    count: {
      columns: "chat_select_column",
    },
  },
  chat_aggregate_order_by: {
    count: "order_by",
    max: "chat_max_order_by",
    min: "chat_min_order_by",
  },
  chat_arr_rel_insert_input: {
    data: "chat_insert_input",
    on_conflict: "chat_on_conflict",
  },
  chat_bool_exp: {
    _and: "chat_bool_exp",
    _not: "chat_bool_exp",
    _or: "chat_bool_exp",
    client: "client_bool_exp",
    friendship: "friendship_bool_exp",
    friendshipId: "uuid_comparison_exp",
    id: "uuid_comparison_exp",
    message: "String_comparison_exp",
    sendAt: "timestamptz_comparison_exp",
    senderId: "uuid_comparison_exp",
    updatedAt: "timestamptz_comparison_exp",
  },
  chat_constraint: "enum" as const,
  chat_insert_input: {
    client: "client_obj_rel_insert_input",
    friendship: "friendship_obj_rel_insert_input",
    friendshipId: "uuid",
    id: "uuid",
    sendAt: "timestamptz",
    senderId: "uuid",
    updatedAt: "timestamptz",
  },
  chat_max_order_by: {
    friendshipId: "order_by",
    id: "order_by",
    message: "order_by",
    sendAt: "order_by",
    senderId: "order_by",
    updatedAt: "order_by",
  },
  chat_min_order_by: {
    friendshipId: "order_by",
    id: "order_by",
    message: "order_by",
    sendAt: "order_by",
    senderId: "order_by",
    updatedAt: "order_by",
  },
  chat_on_conflict: {
    constraint: "chat_constraint",
    update_columns: "chat_update_column",
    where: "chat_bool_exp",
  },
  chat_order_by: {
    client: "client_order_by",
    friendship: "friendship_order_by",
    friendshipId: "order_by",
    id: "order_by",
    message: "order_by",
    sendAt: "order_by",
    senderId: "order_by",
    updatedAt: "order_by",
  },
  chat_pk_columns_input: {
    id: "uuid",
  },
  chat_select_column: "enum" as const,
  chat_set_input: {
    friendshipId: "uuid",
    id: "uuid",
    sendAt: "timestamptz",
    senderId: "uuid",
    updatedAt: "timestamptz",
  },
  chat_stream_cursor_input: {
    initial_value: "chat_stream_cursor_value_input",
    ordering: "cursor_ordering",
  },
  chat_stream_cursor_value_input: {
    friendshipId: "uuid",
    id: "uuid",
    sendAt: "timestamptz",
    senderId: "uuid",
    updatedAt: "timestamptz",
  },
  chat_update_column: "enum" as const,
  chat_updates: {
    _set: "chat_set_input",
    where: "chat_bool_exp",
  },
  client: {
    accounts: {
      distinct_on: "account_select_column",
      order_by: "account_order_by",
      where: "account_bool_exp",
    },
    accounts_aggregate: {
      distinct_on: "account_select_column",
      order_by: "account_order_by",
      where: "account_bool_exp",
    },
    chats: {
      distinct_on: "chat_select_column",
      order_by: "chat_order_by",
      where: "chat_bool_exp",
    },
    chats_aggregate: {
      distinct_on: "chat_select_column",
      order_by: "chat_order_by",
      where: "chat_bool_exp",
    },
    friendships: {
      distinct_on: "friendship_select_column",
      order_by: "friendship_order_by",
      where: "friendship_bool_exp",
    },
    friendshipsByClientid2: {
      distinct_on: "friendship_select_column",
      order_by: "friendship_order_by",
      where: "friendship_bool_exp",
    },
    friendshipsByClientid2_aggregate: {
      distinct_on: "friendship_select_column",
      order_by: "friendship_order_by",
      where: "friendship_bool_exp",
    },
    friendships_aggregate: {
      distinct_on: "friendship_select_column",
      order_by: "friendship_order_by",
      where: "friendship_bool_exp",
    },
    notifications: {
      distinct_on: "notification_select_column",
      order_by: "notification_order_by",
      where: "notification_bool_exp",
    },
    notifications_aggregate: {
      distinct_on: "notification_select_column",
      order_by: "notification_order_by",
      where: "notification_bool_exp",
    },
    transactions: {
      distinct_on: "transactions_select_column",
      order_by: "transactions_order_by",
      where: "transactions_bool_exp",
    },
    transactions_aggregate: {
      distinct_on: "transactions_select_column",
      order_by: "transactions_order_by",
      where: "transactions_bool_exp",
    },
    wallets: {
      distinct_on: "wallet_select_column",
      order_by: "wallet_order_by",
      where: "wallet_bool_exp",
    },
    wallets_aggregate: {
      distinct_on: "wallet_select_column",
      order_by: "wallet_order_by",
      where: "wallet_bool_exp",
    },
  },
  client_aggregate_fields: {
    count: {
      columns: "client_select_column",
    },
  },
  client_bool_exp: {
    _and: "client_bool_exp",
    _not: "client_bool_exp",
    _or: "client_bool_exp",
    accounts: "account_bool_exp",
    accounts_aggregate: "account_aggregate_bool_exp",
    address: "address_bool_exp",
    chats: "chat_bool_exp",
    chats_aggregate: "chat_aggregate_bool_exp",
    createdAt: "timestamptz_comparison_exp",
    email: "String_comparison_exp",
    firstname: "String_comparison_exp",
    friendships: "friendship_bool_exp",
    friendshipsByClientid2: "friendship_bool_exp",
    friendshipsByClientid2_aggregate: "friendship_aggregate_bool_exp",
    friendships_aggregate: "friendship_aggregate_bool_exp",
    id: "uuid_comparison_exp",
    lastname: "String_comparison_exp",
    mobile: "bigint_comparison_exp",
    notifications: "notification_bool_exp",
    notifications_aggregate: "notification_aggregate_bool_exp",
    password: "String_comparison_exp",
    transactions: "transactions_bool_exp",
    transactions_aggregate: "transactions_aggregate_bool_exp",
    updatedAt: "timestamptz_comparison_exp",
    username: "String_comparison_exp",
    valid: "Boolean_comparison_exp",
    wallets: "wallet_bool_exp",
    wallets_aggregate: "wallet_aggregate_bool_exp",
  },
  client_constraint: "enum" as const,
  client_inc_input: {
    mobile: "bigint",
  },
  client_insert_input: {
    accounts: "account_arr_rel_insert_input",
    address: "address_obj_rel_insert_input",
    chats: "chat_arr_rel_insert_input",
    createdAt: "timestamptz",
    friendships: "friendship_arr_rel_insert_input",
    friendshipsByClientid2: "friendship_arr_rel_insert_input",
    id: "uuid",
    mobile: "bigint",
    notifications: "notification_arr_rel_insert_input",
    transactions: "transactions_arr_rel_insert_input",
    updatedAt: "timestamptz",
    wallets: "wallet_arr_rel_insert_input",
  },
  client_obj_rel_insert_input: {
    data: "client_insert_input",
    on_conflict: "client_on_conflict",
  },
  client_on_conflict: {
    constraint: "client_constraint",
    update_columns: "client_update_column",
    where: "client_bool_exp",
  },
  client_order_by: {
    accounts_aggregate: "account_aggregate_order_by",
    address: "address_order_by",
    chats_aggregate: "chat_aggregate_order_by",
    createdAt: "order_by",
    email: "order_by",
    firstname: "order_by",
    friendshipsByClientid2_aggregate: "friendship_aggregate_order_by",
    friendships_aggregate: "friendship_aggregate_order_by",
    id: "order_by",
    lastname: "order_by",
    mobile: "order_by",
    notifications_aggregate: "notification_aggregate_order_by",
    password: "order_by",
    transactions_aggregate: "transactions_aggregate_order_by",
    updatedAt: "order_by",
    username: "order_by",
    valid: "order_by",
    wallets_aggregate: "wallet_aggregate_order_by",
  },
  client_pk_columns_input: {
    id: "uuid",
  },
  client_select_column: "enum" as const,
  client_set_input: {
    createdAt: "timestamptz",
    id: "uuid",
    mobile: "bigint",
    updatedAt: "timestamptz",
  },
  client_stream_cursor_input: {
    initial_value: "client_stream_cursor_value_input",
    ordering: "cursor_ordering",
  },
  client_stream_cursor_value_input: {
    createdAt: "timestamptz",
    id: "uuid",
    mobile: "bigint",
    updatedAt: "timestamptz",
  },
  client_update_column: "enum" as const,
  client_updates: {
    _inc: "client_inc_input",
    _set: "client_set_input",
    where: "client_bool_exp",
  },
  cursor_ordering: "enum" as const,
  eth_aggregate_fields: {
    count: {
      columns: "eth_select_column",
    },
  },
  eth_bool_exp: {
    _and: "eth_bool_exp",
    _not: "eth_bool_exp",
    _or: "eth_bool_exp",
    account: "account_bool_exp",
    accountId: "uuid_comparison_exp",
    createdAt: "timestamptz_comparison_exp",
    goerliEth: "float8_comparison_exp",
    id: "uuid_comparison_exp",
    kovanEth: "float8_comparison_exp",
    mainnetEth: "float8_comparison_exp",
    privateKey: "String_comparison_exp",
    publicKey: "String_comparison_exp",
    rinkebyEth: "float8_comparison_exp",
    ropstenEth: "float8_comparison_exp",
    sepoliaEth: "float8_comparison_exp",
    updatedAt: "timestamptz_comparison_exp",
  },
  eth_constraint: "enum" as const,
  eth_inc_input: {
    goerliEth: "float8",
    kovanEth: "float8",
    mainnetEth: "float8",
    rinkebyEth: "float8",
    ropstenEth: "float8",
    sepoliaEth: "float8",
  },
  eth_insert_input: {
    account: "account_obj_rel_insert_input",
    accountId: "uuid",
    createdAt: "timestamptz",
    goerliEth: "float8",
    id: "uuid",
    kovanEth: "float8",
    mainnetEth: "float8",
    rinkebyEth: "float8",
    ropstenEth: "float8",
    sepoliaEth: "float8",
    updatedAt: "timestamptz",
  },
  eth_obj_rel_insert_input: {
    data: "eth_insert_input",
    on_conflict: "eth_on_conflict",
  },
  eth_on_conflict: {
    constraint: "eth_constraint",
    update_columns: "eth_update_column",
    where: "eth_bool_exp",
  },
  eth_order_by: {
    account: "account_order_by",
    accountId: "order_by",
    createdAt: "order_by",
    goerliEth: "order_by",
    id: "order_by",
    kovanEth: "order_by",
    mainnetEth: "order_by",
    privateKey: "order_by",
    publicKey: "order_by",
    rinkebyEth: "order_by",
    ropstenEth: "order_by",
    sepoliaEth: "order_by",
    updatedAt: "order_by",
  },
  eth_pk_columns_input: {
    id: "uuid",
  },
  eth_select_column: "enum" as const,
  eth_set_input: {
    accountId: "uuid",
    createdAt: "timestamptz",
    goerliEth: "float8",
    id: "uuid",
    kovanEth: "float8",
    mainnetEth: "float8",
    rinkebyEth: "float8",
    ropstenEth: "float8",
    sepoliaEth: "float8",
    updatedAt: "timestamptz",
  },
  eth_stream_cursor_input: {
    initial_value: "eth_stream_cursor_value_input",
    ordering: "cursor_ordering",
  },
  eth_stream_cursor_value_input: {
    accountId: "uuid",
    createdAt: "timestamptz",
    goerliEth: "float8",
    id: "uuid",
    kovanEth: "float8",
    mainnetEth: "float8",
    rinkebyEth: "float8",
    ropstenEth: "float8",
    sepoliaEth: "float8",
    updatedAt: "timestamptz",
  },
  eth_update_column: "enum" as const,
  eth_updates: {
    _inc: "eth_inc_input",
    _set: "eth_set_input",
    where: "eth_bool_exp",
  },
  float8: `scalar.float8` as const,
  float8_comparison_exp: {
    _eq: "float8",
    _gt: "float8",
    _gte: "float8",
    _in: "float8",
    _lt: "float8",
    _lte: "float8",
    _neq: "float8",
    _nin: "float8",
  },
  friendship: {
    chats: {
      distinct_on: "chat_select_column",
      order_by: "chat_order_by",
      where: "chat_bool_exp",
    },
    chats_aggregate: {
      distinct_on: "chat_select_column",
      order_by: "chat_order_by",
      where: "chat_bool_exp",
    },
  },
  friendship_aggregate_bool_exp: {
    count: "friendship_aggregate_bool_exp_count",
  },
  friendship_aggregate_bool_exp_count: {
    arguments: "friendship_select_column",
    filter: "friendship_bool_exp",
    predicate: "Int_comparison_exp",
  },
  friendship_aggregate_fields: {
    count: {
      columns: "friendship_select_column",
    },
  },
  friendship_aggregate_order_by: {
    count: "order_by",
    max: "friendship_max_order_by",
    min: "friendship_min_order_by",
  },
  friendship_arr_rel_insert_input: {
    data: "friendship_insert_input",
    on_conflict: "friendship_on_conflict",
  },
  friendship_bool_exp: {
    _and: "friendship_bool_exp",
    _not: "friendship_bool_exp",
    _or: "friendship_bool_exp",
    chats: "chat_bool_exp",
    chats_aggregate: "chat_aggregate_bool_exp",
    client1: "client_bool_exp",
    client2: "client_bool_exp",
    clientId1: "uuid_comparison_exp",
    clientId2: "uuid_comparison_exp",
    createdAt: "timestamptz_comparison_exp",
    id: "uuid_comparison_exp",
    status: "String_comparison_exp",
    updatedAt: "timestamptz_comparison_exp",
  },
  friendship_constraint: "enum" as const,
  friendship_insert_input: {
    chats: "chat_arr_rel_insert_input",
    client1: "client_obj_rel_insert_input",
    client2: "client_obj_rel_insert_input",
    clientId1: "uuid",
    clientId2: "uuid",
    createdAt: "timestamptz",
    id: "uuid",
    updatedAt: "timestamptz",
  },
  friendship_max_order_by: {
    clientId1: "order_by",
    clientId2: "order_by",
    createdAt: "order_by",
    id: "order_by",
    status: "order_by",
    updatedAt: "order_by",
  },
  friendship_min_order_by: {
    clientId1: "order_by",
    clientId2: "order_by",
    createdAt: "order_by",
    id: "order_by",
    status: "order_by",
    updatedAt: "order_by",
  },
  friendship_obj_rel_insert_input: {
    data: "friendship_insert_input",
    on_conflict: "friendship_on_conflict",
  },
  friendship_on_conflict: {
    constraint: "friendship_constraint",
    update_columns: "friendship_update_column",
    where: "friendship_bool_exp",
  },
  friendship_order_by: {
    chats_aggregate: "chat_aggregate_order_by",
    client1: "client_order_by",
    client2: "client_order_by",
    clientId1: "order_by",
    clientId2: "order_by",
    createdAt: "order_by",
    id: "order_by",
    status: "order_by",
    updatedAt: "order_by",
  },
  friendship_pk_columns_input: {
    id: "uuid",
  },
  friendship_select_column: "enum" as const,
  friendship_set_input: {
    clientId1: "uuid",
    clientId2: "uuid",
    createdAt: "timestamptz",
    id: "uuid",
    updatedAt: "timestamptz",
  },
  friendship_stream_cursor_input: {
    initial_value: "friendship_stream_cursor_value_input",
    ordering: "cursor_ordering",
  },
  friendship_stream_cursor_value_input: {
    clientId1: "uuid",
    clientId2: "uuid",
    createdAt: "timestamptz",
    id: "uuid",
    updatedAt: "timestamptz",
  },
  friendship_update_column: "enum" as const,
  friendship_updates: {
    _set: "friendship_set_input",
    where: "friendship_bool_exp",
  },
  mutation_root: {
    delete_account: {
      where: "account_bool_exp",
    },
    delete_account_by_pk: {
      id: "uuid",
    },
    delete_address: {
      where: "address_bool_exp",
    },
    delete_address_by_pk: {
      id: "uuid",
    },
    delete_bitcoin: {
      where: "bitcoin_bool_exp",
    },
    delete_bitcoin_by_pk: {
      id: "uuid",
    },
    delete_chat: {
      where: "chat_bool_exp",
    },
    delete_chat_by_pk: {
      id: "uuid",
    },
    delete_client: {
      where: "client_bool_exp",
    },
    delete_client_by_pk: {
      id: "uuid",
    },
    delete_eth: {
      where: "eth_bool_exp",
    },
    delete_eth_by_pk: {
      id: "uuid",
    },
    delete_friendship: {
      where: "friendship_bool_exp",
    },
    delete_friendship_by_pk: {
      id: "uuid",
    },
    delete_notification: {
      where: "notification_bool_exp",
    },
    delete_notification_by_pk: {
      id: "uuid",
    },
    delete_notification_subscription: {
      where: "notification_subscription_bool_exp",
    },
    delete_notification_subscription_by_pk: {
      id: "uuid",
    },
    delete_sol: {
      where: "sol_bool_exp",
    },
    delete_sol_by_pk: {
      id: "uuid",
    },
    delete_transactions: {
      where: "transactions_bool_exp",
    },
    delete_transactions_by_pk: {
      id: "uuid",
    },
    delete_wallet: {
      where: "wallet_bool_exp",
    },
    delete_wallet_by_pk: {
      id: "uuid",
    },
    insert_account: {
      objects: "account_insert_input",
      on_conflict: "account_on_conflict",
    },
    insert_account_one: {
      object: "account_insert_input",
      on_conflict: "account_on_conflict",
    },
    insert_address: {
      objects: "address_insert_input",
      on_conflict: "address_on_conflict",
    },
    insert_address_one: {
      object: "address_insert_input",
      on_conflict: "address_on_conflict",
    },
    insert_bitcoin: {
      objects: "bitcoin_insert_input",
      on_conflict: "bitcoin_on_conflict",
    },
    insert_bitcoin_one: {
      object: "bitcoin_insert_input",
      on_conflict: "bitcoin_on_conflict",
    },
    insert_chat: {
      objects: "chat_insert_input",
      on_conflict: "chat_on_conflict",
    },
    insert_chat_one: {
      object: "chat_insert_input",
      on_conflict: "chat_on_conflict",
    },
    insert_client: {
      objects: "client_insert_input",
      on_conflict: "client_on_conflict",
    },
    insert_client_one: {
      object: "client_insert_input",
      on_conflict: "client_on_conflict",
    },
    insert_eth: {
      objects: "eth_insert_input",
      on_conflict: "eth_on_conflict",
    },
    insert_eth_one: {
      object: "eth_insert_input",
      on_conflict: "eth_on_conflict",
    },
    insert_friendship: {
      objects: "friendship_insert_input",
      on_conflict: "friendship_on_conflict",
    },
    insert_friendship_one: {
      object: "friendship_insert_input",
      on_conflict: "friendship_on_conflict",
    },
    insert_notification: {
      objects: "notification_insert_input",
      on_conflict: "notification_on_conflict",
    },
    insert_notification_one: {
      object: "notification_insert_input",
      on_conflict: "notification_on_conflict",
    },
    insert_notification_subscription: {
      objects: "notification_subscription_insert_input",
      on_conflict: "notification_subscription_on_conflict",
    },
    insert_notification_subscription_one: {
      object: "notification_subscription_insert_input",
      on_conflict: "notification_subscription_on_conflict",
    },
    insert_sol: {
      objects: "sol_insert_input",
      on_conflict: "sol_on_conflict",
    },
    insert_sol_one: {
      object: "sol_insert_input",
      on_conflict: "sol_on_conflict",
    },
    insert_transactions: {
      objects: "transactions_insert_input",
      on_conflict: "transactions_on_conflict",
    },
    insert_transactions_one: {
      object: "transactions_insert_input",
      on_conflict: "transactions_on_conflict",
    },
    insert_wallet: {
      objects: "wallet_insert_input",
      on_conflict: "wallet_on_conflict",
    },
    insert_wallet_one: {
      object: "wallet_insert_input",
      on_conflict: "wallet_on_conflict",
    },
    update_account: {
      _set: "account_set_input",
      where: "account_bool_exp",
    },
    update_account_by_pk: {
      _set: "account_set_input",
      pk_columns: "account_pk_columns_input",
    },
    update_account_many: {
      updates: "account_updates",
    },
    update_address: {
      _set: "address_set_input",
      where: "address_bool_exp",
    },
    update_address_by_pk: {
      _set: "address_set_input",
      pk_columns: "address_pk_columns_input",
    },
    update_address_many: {
      updates: "address_updates",
    },
    update_bitcoin: {
      _inc: "bitcoin_inc_input",
      _set: "bitcoin_set_input",
      where: "bitcoin_bool_exp",
    },
    update_bitcoin_by_pk: {
      _inc: "bitcoin_inc_input",
      _set: "bitcoin_set_input",
      pk_columns: "bitcoin_pk_columns_input",
    },
    update_bitcoin_many: {
      updates: "bitcoin_updates",
    },
    update_chat: {
      _set: "chat_set_input",
      where: "chat_bool_exp",
    },
    update_chat_by_pk: {
      _set: "chat_set_input",
      pk_columns: "chat_pk_columns_input",
    },
    update_chat_many: {
      updates: "chat_updates",
    },
    update_client: {
      _inc: "client_inc_input",
      _set: "client_set_input",
      where: "client_bool_exp",
    },
    update_client_by_pk: {
      _inc: "client_inc_input",
      _set: "client_set_input",
      pk_columns: "client_pk_columns_input",
    },
    update_client_many: {
      updates: "client_updates",
    },
    update_eth: {
      _inc: "eth_inc_input",
      _set: "eth_set_input",
      where: "eth_bool_exp",
    },
    update_eth_by_pk: {
      _inc: "eth_inc_input",
      _set: "eth_set_input",
      pk_columns: "eth_pk_columns_input",
    },
    update_eth_many: {
      updates: "eth_updates",
    },
    update_friendship: {
      _set: "friendship_set_input",
      where: "friendship_bool_exp",
    },
    update_friendship_by_pk: {
      _set: "friendship_set_input",
      pk_columns: "friendship_pk_columns_input",
    },
    update_friendship_many: {
      updates: "friendship_updates",
    },
    update_notification: {
      _set: "notification_set_input",
      where: "notification_bool_exp",
    },
    update_notification_by_pk: {
      _set: "notification_set_input",
      pk_columns: "notification_pk_columns_input",
    },
    update_notification_many: {
      updates: "notification_updates",
    },
    update_notification_subscription: {
      _set: "notification_subscription_set_input",
      where: "notification_subscription_bool_exp",
    },
    update_notification_subscription_by_pk: {
      _set: "notification_subscription_set_input",
      pk_columns: "notification_subscription_pk_columns_input",
    },
    update_notification_subscription_many: {
      updates: "notification_subscription_updates",
    },
    update_sol: {
      _inc: "sol_inc_input",
      _set: "sol_set_input",
      where: "sol_bool_exp",
    },
    update_sol_by_pk: {
      _inc: "sol_inc_input",
      _set: "sol_set_input",
      pk_columns: "sol_pk_columns_input",
    },
    update_sol_many: {
      updates: "sol_updates",
    },
    update_transactions: {
      _inc: "transactions_inc_input",
      _set: "transactions_set_input",
      where: "transactions_bool_exp",
    },
    update_transactions_by_pk: {
      _inc: "transactions_inc_input",
      _set: "transactions_set_input",
      pk_columns: "transactions_pk_columns_input",
    },
    update_transactions_many: {
      updates: "transactions_updates",
    },
    update_wallet: {
      _set: "wallet_set_input",
      where: "wallet_bool_exp",
    },
    update_wallet_by_pk: {
      _set: "wallet_set_input",
      pk_columns: "wallet_pk_columns_input",
    },
    update_wallet_many: {
      updates: "wallet_updates",
    },
  },
  notification_aggregate_bool_exp: {
    bool_and: "notification_aggregate_bool_exp_bool_and",
    bool_or: "notification_aggregate_bool_exp_bool_or",
    count: "notification_aggregate_bool_exp_count",
  },
  notification_aggregate_bool_exp_bool_and: {
    arguments:
      "notification_select_column_notification_aggregate_bool_exp_bool_and_arguments_columns",
    filter: "notification_bool_exp",
    predicate: "Boolean_comparison_exp",
  },
  notification_aggregate_bool_exp_bool_or: {
    arguments:
      "notification_select_column_notification_aggregate_bool_exp_bool_or_arguments_columns",
    filter: "notification_bool_exp",
    predicate: "Boolean_comparison_exp",
  },
  notification_aggregate_bool_exp_count: {
    arguments: "notification_select_column",
    filter: "notification_bool_exp",
    predicate: "Int_comparison_exp",
  },
  notification_aggregate_fields: {
    count: {
      columns: "notification_select_column",
    },
  },
  notification_aggregate_order_by: {
    count: "order_by",
    max: "notification_max_order_by",
    min: "notification_min_order_by",
  },
  notification_arr_rel_insert_input: {
    data: "notification_insert_input",
    on_conflict: "notification_on_conflict",
  },
  notification_bool_exp: {
    _and: "notification_bool_exp",
    _not: "notification_bool_exp",
    _or: "notification_bool_exp",
    body: "String_comparison_exp",
    client: "client_bool_exp",
    clientId: "uuid_comparison_exp",
    id: "uuid_comparison_exp",
    image: "String_comparison_exp",
    timestamp: "timestamp_comparison_exp",
    title: "String_comparison_exp",
    updatedAt: "timestamptz_comparison_exp",
    uuid: "uuid_comparison_exp",
    viewed: "Boolean_comparison_exp",
  },
  notification_constraint: "enum" as const,
  notification_insert_input: {
    client: "client_obj_rel_insert_input",
    clientId: "uuid",
    id: "uuid",
    timestamp: "timestamp",
    updatedAt: "timestamptz",
    uuid: "uuid",
  },
  notification_max_order_by: {
    body: "order_by",
    clientId: "order_by",
    id: "order_by",
    image: "order_by",
    timestamp: "order_by",
    title: "order_by",
    updatedAt: "order_by",
    uuid: "order_by",
  },
  notification_min_order_by: {
    body: "order_by",
    clientId: "order_by",
    id: "order_by",
    image: "order_by",
    timestamp: "order_by",
    title: "order_by",
    updatedAt: "order_by",
    uuid: "order_by",
  },
  notification_on_conflict: {
    constraint: "notification_constraint",
    update_columns: "notification_update_column",
    where: "notification_bool_exp",
  },
  notification_order_by: {
    body: "order_by",
    client: "client_order_by",
    clientId: "order_by",
    id: "order_by",
    image: "order_by",
    timestamp: "order_by",
    title: "order_by",
    updatedAt: "order_by",
    uuid: "order_by",
    viewed: "order_by",
  },
  notification_pk_columns_input: {
    id: "uuid",
  },
  notification_select_column: "enum" as const,
  notification_select_column_notification_aggregate_bool_exp_bool_and_arguments_columns:
    "enum" as const,
  notification_select_column_notification_aggregate_bool_exp_bool_or_arguments_columns:
    "enum" as const,
  notification_set_input: {
    clientId: "uuid",
    id: "uuid",
    timestamp: "timestamp",
    updatedAt: "timestamptz",
    uuid: "uuid",
  },
  notification_stream_cursor_input: {
    initial_value: "notification_stream_cursor_value_input",
    ordering: "cursor_ordering",
  },
  notification_stream_cursor_value_input: {
    clientId: "uuid",
    id: "uuid",
    timestamp: "timestamp",
    updatedAt: "timestamptz",
    uuid: "uuid",
  },
  notification_subscription_aggregate_fields: {
    count: {
      columns: "notification_subscription_select_column",
    },
  },
  notification_subscription_bool_exp: {
    _and: "notification_subscription_bool_exp",
    _not: "notification_subscription_bool_exp",
    _or: "notification_subscription_bool_exp",
    auth: "String_comparison_exp",
    clientId: "uuid_comparison_exp",
    endpoint: "String_comparison_exp",
    expirationTime: "timestamptz_comparison_exp",
    id: "uuid_comparison_exp",
    p256dh: "String_comparison_exp",
    public_key: "String_comparison_exp",
    updatedAt: "timestamptz_comparison_exp",
    uuid: "uuid_comparison_exp",
  },
  notification_subscription_constraint: "enum" as const,
  notification_subscription_insert_input: {
    clientId: "uuid",
    expirationTime: "timestamptz",
    id: "uuid",
    updatedAt: "timestamptz",
    uuid: "uuid",
  },
  notification_subscription_on_conflict: {
    constraint: "notification_subscription_constraint",
    update_columns: "notification_subscription_update_column",
    where: "notification_subscription_bool_exp",
  },
  notification_subscription_order_by: {
    auth: "order_by",
    clientId: "order_by",
    endpoint: "order_by",
    expirationTime: "order_by",
    id: "order_by",
    p256dh: "order_by",
    public_key: "order_by",
    updatedAt: "order_by",
    uuid: "order_by",
  },
  notification_subscription_pk_columns_input: {
    id: "uuid",
  },
  notification_subscription_select_column: "enum" as const,
  notification_subscription_set_input: {
    clientId: "uuid",
    expirationTime: "timestamptz",
    id: "uuid",
    updatedAt: "timestamptz",
    uuid: "uuid",
  },
  notification_subscription_stream_cursor_input: {
    initial_value: "notification_subscription_stream_cursor_value_input",
    ordering: "cursor_ordering",
  },
  notification_subscription_stream_cursor_value_input: {
    clientId: "uuid",
    expirationTime: "timestamptz",
    id: "uuid",
    updatedAt: "timestamptz",
    uuid: "uuid",
  },
  notification_subscription_update_column: "enum" as const,
  notification_subscription_updates: {
    _set: "notification_subscription_set_input",
    where: "notification_subscription_bool_exp",
  },
  notification_update_column: "enum" as const,
  notification_updates: {
    _set: "notification_set_input",
    where: "notification_bool_exp",
  },
  order_by: "enum" as const,
  query_root: {
    account: {
      distinct_on: "account_select_column",
      order_by: "account_order_by",
      where: "account_bool_exp",
    },
    account_aggregate: {
      distinct_on: "account_select_column",
      order_by: "account_order_by",
      where: "account_bool_exp",
    },
    account_by_pk: {
      id: "uuid",
    },
    address: {
      distinct_on: "address_select_column",
      order_by: "address_order_by",
      where: "address_bool_exp",
    },
    address_aggregate: {
      distinct_on: "address_select_column",
      order_by: "address_order_by",
      where: "address_bool_exp",
    },
    address_by_pk: {
      id: "uuid",
    },
    bitcoin: {
      distinct_on: "bitcoin_select_column",
      order_by: "bitcoin_order_by",
      where: "bitcoin_bool_exp",
    },
    bitcoin_aggregate: {
      distinct_on: "bitcoin_select_column",
      order_by: "bitcoin_order_by",
      where: "bitcoin_bool_exp",
    },
    bitcoin_by_pk: {
      id: "uuid",
    },
    chat: {
      distinct_on: "chat_select_column",
      order_by: "chat_order_by",
      where: "chat_bool_exp",
    },
    chat_aggregate: {
      distinct_on: "chat_select_column",
      order_by: "chat_order_by",
      where: "chat_bool_exp",
    },
    chat_by_pk: {
      id: "uuid",
    },
    client: {
      distinct_on: "client_select_column",
      order_by: "client_order_by",
      where: "client_bool_exp",
    },
    client_aggregate: {
      distinct_on: "client_select_column",
      order_by: "client_order_by",
      where: "client_bool_exp",
    },
    client_by_pk: {
      id: "uuid",
    },
    eth: {
      distinct_on: "eth_select_column",
      order_by: "eth_order_by",
      where: "eth_bool_exp",
    },
    eth_aggregate: {
      distinct_on: "eth_select_column",
      order_by: "eth_order_by",
      where: "eth_bool_exp",
    },
    eth_by_pk: {
      id: "uuid",
    },
    friendship: {
      distinct_on: "friendship_select_column",
      order_by: "friendship_order_by",
      where: "friendship_bool_exp",
    },
    friendship_aggregate: {
      distinct_on: "friendship_select_column",
      order_by: "friendship_order_by",
      where: "friendship_bool_exp",
    },
    friendship_by_pk: {
      id: "uuid",
    },
    notification: {
      distinct_on: "notification_select_column",
      order_by: "notification_order_by",
      where: "notification_bool_exp",
    },
    notification_aggregate: {
      distinct_on: "notification_select_column",
      order_by: "notification_order_by",
      where: "notification_bool_exp",
    },
    notification_by_pk: {
      id: "uuid",
    },
    notification_subscription: {
      distinct_on: "notification_subscription_select_column",
      order_by: "notification_subscription_order_by",
      where: "notification_subscription_bool_exp",
    },
    notification_subscription_aggregate: {
      distinct_on: "notification_subscription_select_column",
      order_by: "notification_subscription_order_by",
      where: "notification_subscription_bool_exp",
    },
    notification_subscription_by_pk: {
      id: "uuid",
    },
    sol: {
      distinct_on: "sol_select_column",
      order_by: "sol_order_by",
      where: "sol_bool_exp",
    },
    sol_aggregate: {
      distinct_on: "sol_select_column",
      order_by: "sol_order_by",
      where: "sol_bool_exp",
    },
    sol_by_pk: {
      id: "uuid",
    },
    transactions: {
      distinct_on: "transactions_select_column",
      order_by: "transactions_order_by",
      where: "transactions_bool_exp",
    },
    transactions_aggregate: {
      distinct_on: "transactions_select_column",
      order_by: "transactions_order_by",
      where: "transactions_bool_exp",
    },
    transactions_by_pk: {
      id: "uuid",
    },
    wallet: {
      distinct_on: "wallet_select_column",
      order_by: "wallet_order_by",
      where: "wallet_bool_exp",
    },
    wallet_aggregate: {
      distinct_on: "wallet_select_column",
      order_by: "wallet_order_by",
      where: "wallet_bool_exp",
    },
    wallet_by_pk: {
      id: "uuid",
    },
  },
  sol_aggregate_fields: {
    count: {
      columns: "sol_select_column",
    },
  },
  sol_bool_exp: {
    _and: "sol_bool_exp",
    _not: "sol_bool_exp",
    _or: "sol_bool_exp",
    account: "account_bool_exp",
    accountId: "uuid_comparison_exp",
    createdAt: "timestamptz_comparison_exp",
    devnetSol: "float8_comparison_exp",
    id: "uuid_comparison_exp",
    mainnetSol: "float8_comparison_exp",
    privateKey: "String_comparison_exp",
    publicKey: "String_comparison_exp",
    testnetSol: "float8_comparison_exp",
    updatedAt: "timestamptz_comparison_exp",
  },
  sol_constraint: "enum" as const,
  sol_inc_input: {
    devnetSol: "float8",
    mainnetSol: "float8",
    testnetSol: "float8",
  },
  sol_insert_input: {
    account: "account_obj_rel_insert_input",
    accountId: "uuid",
    createdAt: "timestamptz",
    devnetSol: "float8",
    id: "uuid",
    mainnetSol: "float8",
    testnetSol: "float8",
    updatedAt: "timestamptz",
  },
  sol_obj_rel_insert_input: {
    data: "sol_insert_input",
    on_conflict: "sol_on_conflict",
  },
  sol_on_conflict: {
    constraint: "sol_constraint",
    update_columns: "sol_update_column",
    where: "sol_bool_exp",
  },
  sol_order_by: {
    account: "account_order_by",
    accountId: "order_by",
    createdAt: "order_by",
    devnetSol: "order_by",
    id: "order_by",
    mainnetSol: "order_by",
    privateKey: "order_by",
    publicKey: "order_by",
    testnetSol: "order_by",
    updatedAt: "order_by",
  },
  sol_pk_columns_input: {
    id: "uuid",
  },
  sol_select_column: "enum" as const,
  sol_set_input: {
    accountId: "uuid",
    createdAt: "timestamptz",
    devnetSol: "float8",
    id: "uuid",
    mainnetSol: "float8",
    testnetSol: "float8",
    updatedAt: "timestamptz",
  },
  sol_stream_cursor_input: {
    initial_value: "sol_stream_cursor_value_input",
    ordering: "cursor_ordering",
  },
  sol_stream_cursor_value_input: {
    accountId: "uuid",
    createdAt: "timestamptz",
    devnetSol: "float8",
    id: "uuid",
    mainnetSol: "float8",
    testnetSol: "float8",
    updatedAt: "timestamptz",
  },
  sol_update_column: "enum" as const,
  sol_updates: {
    _inc: "sol_inc_input",
    _set: "sol_set_input",
    where: "sol_bool_exp",
  },
  subscription_root: {
    account: {
      distinct_on: "account_select_column",
      order_by: "account_order_by",
      where: "account_bool_exp",
    },
    account_aggregate: {
      distinct_on: "account_select_column",
      order_by: "account_order_by",
      where: "account_bool_exp",
    },
    account_by_pk: {
      id: "uuid",
    },
    account_stream: {
      cursor: "account_stream_cursor_input",
      where: "account_bool_exp",
    },
    address: {
      distinct_on: "address_select_column",
      order_by: "address_order_by",
      where: "address_bool_exp",
    },
    address_aggregate: {
      distinct_on: "address_select_column",
      order_by: "address_order_by",
      where: "address_bool_exp",
    },
    address_by_pk: {
      id: "uuid",
    },
    address_stream: {
      cursor: "address_stream_cursor_input",
      where: "address_bool_exp",
    },
    bitcoin: {
      distinct_on: "bitcoin_select_column",
      order_by: "bitcoin_order_by",
      where: "bitcoin_bool_exp",
    },
    bitcoin_aggregate: {
      distinct_on: "bitcoin_select_column",
      order_by: "bitcoin_order_by",
      where: "bitcoin_bool_exp",
    },
    bitcoin_by_pk: {
      id: "uuid",
    },
    bitcoin_stream: {
      cursor: "bitcoin_stream_cursor_input",
      where: "bitcoin_bool_exp",
    },
    chat: {
      distinct_on: "chat_select_column",
      order_by: "chat_order_by",
      where: "chat_bool_exp",
    },
    chat_aggregate: {
      distinct_on: "chat_select_column",
      order_by: "chat_order_by",
      where: "chat_bool_exp",
    },
    chat_by_pk: {
      id: "uuid",
    },
    chat_stream: {
      cursor: "chat_stream_cursor_input",
      where: "chat_bool_exp",
    },
    client: {
      distinct_on: "client_select_column",
      order_by: "client_order_by",
      where: "client_bool_exp",
    },
    client_aggregate: {
      distinct_on: "client_select_column",
      order_by: "client_order_by",
      where: "client_bool_exp",
    },
    client_by_pk: {
      id: "uuid",
    },
    client_stream: {
      cursor: "client_stream_cursor_input",
      where: "client_bool_exp",
    },
    eth: {
      distinct_on: "eth_select_column",
      order_by: "eth_order_by",
      where: "eth_bool_exp",
    },
    eth_aggregate: {
      distinct_on: "eth_select_column",
      order_by: "eth_order_by",
      where: "eth_bool_exp",
    },
    eth_by_pk: {
      id: "uuid",
    },
    eth_stream: {
      cursor: "eth_stream_cursor_input",
      where: "eth_bool_exp",
    },
    friendship: {
      distinct_on: "friendship_select_column",
      order_by: "friendship_order_by",
      where: "friendship_bool_exp",
    },
    friendship_aggregate: {
      distinct_on: "friendship_select_column",
      order_by: "friendship_order_by",
      where: "friendship_bool_exp",
    },
    friendship_by_pk: {
      id: "uuid",
    },
    friendship_stream: {
      cursor: "friendship_stream_cursor_input",
      where: "friendship_bool_exp",
    },
    notification: {
      distinct_on: "notification_select_column",
      order_by: "notification_order_by",
      where: "notification_bool_exp",
    },
    notification_aggregate: {
      distinct_on: "notification_select_column",
      order_by: "notification_order_by",
      where: "notification_bool_exp",
    },
    notification_by_pk: {
      id: "uuid",
    },
    notification_stream: {
      cursor: "notification_stream_cursor_input",
      where: "notification_bool_exp",
    },
    notification_subscription: {
      distinct_on: "notification_subscription_select_column",
      order_by: "notification_subscription_order_by",
      where: "notification_subscription_bool_exp",
    },
    notification_subscription_aggregate: {
      distinct_on: "notification_subscription_select_column",
      order_by: "notification_subscription_order_by",
      where: "notification_subscription_bool_exp",
    },
    notification_subscription_by_pk: {
      id: "uuid",
    },
    notification_subscription_stream: {
      cursor: "notification_subscription_stream_cursor_input",
      where: "notification_subscription_bool_exp",
    },
    sol: {
      distinct_on: "sol_select_column",
      order_by: "sol_order_by",
      where: "sol_bool_exp",
    },
    sol_aggregate: {
      distinct_on: "sol_select_column",
      order_by: "sol_order_by",
      where: "sol_bool_exp",
    },
    sol_by_pk: {
      id: "uuid",
    },
    sol_stream: {
      cursor: "sol_stream_cursor_input",
      where: "sol_bool_exp",
    },
    transactions: {
      distinct_on: "transactions_select_column",
      order_by: "transactions_order_by",
      where: "transactions_bool_exp",
    },
    transactions_aggregate: {
      distinct_on: "transactions_select_column",
      order_by: "transactions_order_by",
      where: "transactions_bool_exp",
    },
    transactions_by_pk: {
      id: "uuid",
    },
    transactions_stream: {
      cursor: "transactions_stream_cursor_input",
      where: "transactions_bool_exp",
    },
    wallet: {
      distinct_on: "wallet_select_column",
      order_by: "wallet_order_by",
      where: "wallet_bool_exp",
    },
    wallet_aggregate: {
      distinct_on: "wallet_select_column",
      order_by: "wallet_order_by",
      where: "wallet_bool_exp",
    },
    wallet_by_pk: {
      id: "uuid",
    },
    wallet_stream: {
      cursor: "wallet_stream_cursor_input",
      where: "wallet_bool_exp",
    },
  },
  timestamp: `scalar.timestamp` as const,
  timestamp_comparison_exp: {
    _eq: "timestamp",
    _gt: "timestamp",
    _gte: "timestamp",
    _in: "timestamp",
    _lt: "timestamp",
    _lte: "timestamp",
    _neq: "timestamp",
    _nin: "timestamp",
  },
  timestamptz: `scalar.timestamptz` as const,
  timestamptz_comparison_exp: {
    _eq: "timestamptz",
    _gt: "timestamptz",
    _gte: "timestamptz",
    _in: "timestamptz",
    _lt: "timestamptz",
    _lte: "timestamptz",
    _neq: "timestamptz",
    _nin: "timestamptz",
  },
  transactions_aggregate_bool_exp: {
    avg: "transactions_aggregate_bool_exp_avg",
    corr: "transactions_aggregate_bool_exp_corr",
    count: "transactions_aggregate_bool_exp_count",
    covar_samp: "transactions_aggregate_bool_exp_covar_samp",
    max: "transactions_aggregate_bool_exp_max",
    min: "transactions_aggregate_bool_exp_min",
    stddev_samp: "transactions_aggregate_bool_exp_stddev_samp",
    sum: "transactions_aggregate_bool_exp_sum",
    var_samp: "transactions_aggregate_bool_exp_var_samp",
  },
  transactions_aggregate_bool_exp_avg: {
    arguments:
      "transactions_select_column_transactions_aggregate_bool_exp_avg_arguments_columns",
    filter: "transactions_bool_exp",
    predicate: "float8_comparison_exp",
  },
  transactions_aggregate_bool_exp_corr: {
    arguments: "transactions_aggregate_bool_exp_corr_arguments",
    filter: "transactions_bool_exp",
    predicate: "float8_comparison_exp",
  },
  transactions_aggregate_bool_exp_corr_arguments: {
    X: "transactions_select_column_transactions_aggregate_bool_exp_corr_arguments_columns",
    Y: "transactions_select_column_transactions_aggregate_bool_exp_corr_arguments_columns",
  },
  transactions_aggregate_bool_exp_count: {
    arguments: "transactions_select_column",
    filter: "transactions_bool_exp",
    predicate: "Int_comparison_exp",
  },
  transactions_aggregate_bool_exp_covar_samp: {
    arguments: "transactions_aggregate_bool_exp_covar_samp_arguments",
    filter: "transactions_bool_exp",
    predicate: "float8_comparison_exp",
  },
  transactions_aggregate_bool_exp_covar_samp_arguments: {
    X: "transactions_select_column_transactions_aggregate_bool_exp_covar_samp_arguments_columns",
    Y: "transactions_select_column_transactions_aggregate_bool_exp_covar_samp_arguments_columns",
  },
  transactions_aggregate_bool_exp_max: {
    arguments:
      "transactions_select_column_transactions_aggregate_bool_exp_max_arguments_columns",
    filter: "transactions_bool_exp",
    predicate: "float8_comparison_exp",
  },
  transactions_aggregate_bool_exp_min: {
    arguments:
      "transactions_select_column_transactions_aggregate_bool_exp_min_arguments_columns",
    filter: "transactions_bool_exp",
    predicate: "float8_comparison_exp",
  },
  transactions_aggregate_bool_exp_stddev_samp: {
    arguments:
      "transactions_select_column_transactions_aggregate_bool_exp_stddev_samp_arguments_columns",
    filter: "transactions_bool_exp",
    predicate: "float8_comparison_exp",
  },
  transactions_aggregate_bool_exp_sum: {
    arguments:
      "transactions_select_column_transactions_aggregate_bool_exp_sum_arguments_columns",
    filter: "transactions_bool_exp",
    predicate: "float8_comparison_exp",
  },
  transactions_aggregate_bool_exp_var_samp: {
    arguments:
      "transactions_select_column_transactions_aggregate_bool_exp_var_samp_arguments_columns",
    filter: "transactions_bool_exp",
    predicate: "float8_comparison_exp",
  },
  transactions_aggregate_fields: {
    count: {
      columns: "transactions_select_column",
    },
  },
  transactions_aggregate_order_by: {
    avg: "transactions_avg_order_by",
    count: "order_by",
    max: "transactions_max_order_by",
    min: "transactions_min_order_by",
    stddev: "transactions_stddev_order_by",
    stddev_pop: "transactions_stddev_pop_order_by",
    stddev_samp: "transactions_stddev_samp_order_by",
    sum: "transactions_sum_order_by",
    var_pop: "transactions_var_pop_order_by",
    var_samp: "transactions_var_samp_order_by",
    variance: "transactions_variance_order_by",
  },
  transactions_arr_rel_insert_input: {
    data: "transactions_insert_input",
    on_conflict: "transactions_on_conflict",
  },
  transactions_avg_order_by: {
    amount: "order_by",
    chainId: "order_by",
    fee: "order_by",
    nonce: "order_by",
    slot: "order_by",
  },
  transactions_bool_exp: {
    _and: "transactions_bool_exp",
    _not: "transactions_bool_exp",
    _or: "transactions_bool_exp",
    amount: "float8_comparison_exp",
    blockHash: "String_comparison_exp",
    chainId: "bigint_comparison_exp",
    client: "client_bool_exp",
    clientId: "uuid_comparison_exp",
    cluster: "String_comparison_exp",
    createdAt: "timestamptz_comparison_exp",
    fee: "float8_comparison_exp",
    from: "String_comparison_exp",
    hash: "String_comparison_exp",
    id: "uuid_comparison_exp",
    network: "String_comparison_exp",
    nonce: "bigint_comparison_exp",
    slot: "bigint_comparison_exp",
    status: "String_comparison_exp",
    time: "timestamptz_comparison_exp",
    to: "String_comparison_exp",
    updatedAt: "timestamptz_comparison_exp",
  },
  transactions_constraint: "enum" as const,
  transactions_inc_input: {
    amount: "float8",
    chainId: "bigint",
    fee: "float8",
    nonce: "bigint",
    slot: "bigint",
  },
  transactions_insert_input: {
    amount: "float8",
    chainId: "bigint",
    client: "client_obj_rel_insert_input",
    clientId: "uuid",
    createdAt: "timestamptz",
    fee: "float8",
    id: "uuid",
    nonce: "bigint",
    slot: "bigint",
    time: "timestamptz",
    updatedAt: "timestamptz",
  },
  transactions_max_order_by: {
    amount: "order_by",
    blockHash: "order_by",
    chainId: "order_by",
    clientId: "order_by",
    cluster: "order_by",
    createdAt: "order_by",
    fee: "order_by",
    from: "order_by",
    hash: "order_by",
    id: "order_by",
    network: "order_by",
    nonce: "order_by",
    slot: "order_by",
    status: "order_by",
    time: "order_by",
    to: "order_by",
    updatedAt: "order_by",
  },
  transactions_min_order_by: {
    amount: "order_by",
    blockHash: "order_by",
    chainId: "order_by",
    clientId: "order_by",
    cluster: "order_by",
    createdAt: "order_by",
    fee: "order_by",
    from: "order_by",
    hash: "order_by",
    id: "order_by",
    network: "order_by",
    nonce: "order_by",
    slot: "order_by",
    status: "order_by",
    time: "order_by",
    to: "order_by",
    updatedAt: "order_by",
  },
  transactions_on_conflict: {
    constraint: "transactions_constraint",
    update_columns: "transactions_update_column",
    where: "transactions_bool_exp",
  },
  transactions_order_by: {
    amount: "order_by",
    blockHash: "order_by",
    chainId: "order_by",
    client: "client_order_by",
    clientId: "order_by",
    cluster: "order_by",
    createdAt: "order_by",
    fee: "order_by",
    from: "order_by",
    hash: "order_by",
    id: "order_by",
    network: "order_by",
    nonce: "order_by",
    slot: "order_by",
    status: "order_by",
    time: "order_by",
    to: "order_by",
    updatedAt: "order_by",
  },
  transactions_pk_columns_input: {
    id: "uuid",
  },
  transactions_select_column: "enum" as const,
  transactions_select_column_transactions_aggregate_bool_exp_avg_arguments_columns:
    "enum" as const,
  transactions_select_column_transactions_aggregate_bool_exp_corr_arguments_columns:
    "enum" as const,
  transactions_select_column_transactions_aggregate_bool_exp_covar_samp_arguments_columns:
    "enum" as const,
  transactions_select_column_transactions_aggregate_bool_exp_max_arguments_columns:
    "enum" as const,
  transactions_select_column_transactions_aggregate_bool_exp_min_arguments_columns:
    "enum" as const,
  transactions_select_column_transactions_aggregate_bool_exp_stddev_samp_arguments_columns:
    "enum" as const,
  transactions_select_column_transactions_aggregate_bool_exp_sum_arguments_columns:
    "enum" as const,
  transactions_select_column_transactions_aggregate_bool_exp_var_samp_arguments_columns:
    "enum" as const,
  transactions_set_input: {
    amount: "float8",
    chainId: "bigint",
    clientId: "uuid",
    createdAt: "timestamptz",
    fee: "float8",
    id: "uuid",
    nonce: "bigint",
    slot: "bigint",
    time: "timestamptz",
    updatedAt: "timestamptz",
  },
  transactions_stddev_order_by: {
    amount: "order_by",
    chainId: "order_by",
    fee: "order_by",
    nonce: "order_by",
    slot: "order_by",
  },
  transactions_stddev_pop_order_by: {
    amount: "order_by",
    chainId: "order_by",
    fee: "order_by",
    nonce: "order_by",
    slot: "order_by",
  },
  transactions_stddev_samp_order_by: {
    amount: "order_by",
    chainId: "order_by",
    fee: "order_by",
    nonce: "order_by",
    slot: "order_by",
  },
  transactions_stream_cursor_input: {
    initial_value: "transactions_stream_cursor_value_input",
    ordering: "cursor_ordering",
  },
  transactions_stream_cursor_value_input: {
    amount: "float8",
    chainId: "bigint",
    clientId: "uuid",
    createdAt: "timestamptz",
    fee: "float8",
    id: "uuid",
    nonce: "bigint",
    slot: "bigint",
    time: "timestamptz",
    updatedAt: "timestamptz",
  },
  transactions_sum_order_by: {
    amount: "order_by",
    chainId: "order_by",
    fee: "order_by",
    nonce: "order_by",
    slot: "order_by",
  },
  transactions_update_column: "enum" as const,
  transactions_updates: {
    _inc: "transactions_inc_input",
    _set: "transactions_set_input",
    where: "transactions_bool_exp",
  },
  transactions_var_pop_order_by: {
    amount: "order_by",
    chainId: "order_by",
    fee: "order_by",
    nonce: "order_by",
    slot: "order_by",
  },
  transactions_var_samp_order_by: {
    amount: "order_by",
    chainId: "order_by",
    fee: "order_by",
    nonce: "order_by",
    slot: "order_by",
  },
  transactions_variance_order_by: {
    amount: "order_by",
    chainId: "order_by",
    fee: "order_by",
    nonce: "order_by",
    slot: "order_by",
  },
  uuid: `scalar.uuid` as const,
  uuid_comparison_exp: {
    _eq: "uuid",
    _gt: "uuid",
    _gte: "uuid",
    _in: "uuid",
    _lt: "uuid",
    _lte: "uuid",
    _neq: "uuid",
    _nin: "uuid",
  },
  wallet: {
    accounts: {
      distinct_on: "account_select_column",
      order_by: "account_order_by",
      where: "account_bool_exp",
    },
    accounts_aggregate: {
      distinct_on: "account_select_column",
      order_by: "account_order_by",
      where: "account_bool_exp",
    },
  },
  wallet_aggregate_bool_exp: {
    count: "wallet_aggregate_bool_exp_count",
  },
  wallet_aggregate_bool_exp_count: {
    arguments: "wallet_select_column",
    filter: "wallet_bool_exp",
    predicate: "Int_comparison_exp",
  },
  wallet_aggregate_fields: {
    count: {
      columns: "wallet_select_column",
    },
  },
  wallet_aggregate_order_by: {
    count: "order_by",
    max: "wallet_max_order_by",
    min: "wallet_min_order_by",
  },
  wallet_arr_rel_insert_input: {
    data: "wallet_insert_input",
    on_conflict: "wallet_on_conflict",
  },
  wallet_bool_exp: {
    _and: "wallet_bool_exp",
    _not: "wallet_bool_exp",
    _or: "wallet_bool_exp",
    accounts: "account_bool_exp",
    accounts_aggregate: "account_aggregate_bool_exp",
    client: "client_bool_exp",
    clientId: "uuid_comparison_exp",
    createdAt: "timestamptz_comparison_exp",
    id: "uuid_comparison_exp",
    secretPhase: "String_comparison_exp",
    updatedAt: "timestamptz_comparison_exp",
  },
  wallet_constraint: "enum" as const,
  wallet_insert_input: {
    accounts: "account_arr_rel_insert_input",
    client: "client_obj_rel_insert_input",
    clientId: "uuid",
    createdAt: "timestamptz",
    id: "uuid",
    updatedAt: "timestamptz",
  },
  wallet_max_order_by: {
    clientId: "order_by",
    createdAt: "order_by",
    id: "order_by",
    secretPhase: "order_by",
    updatedAt: "order_by",
  },
  wallet_min_order_by: {
    clientId: "order_by",
    createdAt: "order_by",
    id: "order_by",
    secretPhase: "order_by",
    updatedAt: "order_by",
  },
  wallet_obj_rel_insert_input: {
    data: "wallet_insert_input",
    on_conflict: "wallet_on_conflict",
  },
  wallet_on_conflict: {
    constraint: "wallet_constraint",
    update_columns: "wallet_update_column",
    where: "wallet_bool_exp",
  },
  wallet_order_by: {
    accounts_aggregate: "account_aggregate_order_by",
    client: "client_order_by",
    clientId: "order_by",
    createdAt: "order_by",
    id: "order_by",
    secretPhase: "order_by",
    updatedAt: "order_by",
  },
  wallet_pk_columns_input: {
    id: "uuid",
  },
  wallet_select_column: "enum" as const,
  wallet_set_input: {
    clientId: "uuid",
    createdAt: "timestamptz",
    id: "uuid",
    updatedAt: "timestamptz",
  },
  wallet_stream_cursor_input: {
    initial_value: "wallet_stream_cursor_value_input",
    ordering: "cursor_ordering",
  },
  wallet_stream_cursor_value_input: {
    clientId: "uuid",
    createdAt: "timestamptz",
    id: "uuid",
    updatedAt: "timestamptz",
  },
  wallet_update_column: "enum" as const,
  wallet_updates: {
    _set: "wallet_set_input",
    where: "wallet_bool_exp",
  },
};

export const ReturnTypes: Record<string, any> = {
  cached: {
    ttl: "Int",
    refresh: "Boolean",
  },
  account: {
    bitcoin: "bitcoin",
    client: "client",
    clientId: "uuid",
    createdAt: "timestamptz",
    eth: "eth",
    id: "uuid",
    img: "String",
    name: "String",
    sol: "sol",
    updatedAt: "timestamptz",
    wallet: "wallet",
    walletId: "uuid",
  },
  account_aggregate: {
    aggregate: "account_aggregate_fields",
    nodes: "account",
  },
  account_aggregate_fields: {
    count: "Int",
    max: "account_max_fields",
    min: "account_min_fields",
  },
  account_max_fields: {
    clientId: "uuid",
    createdAt: "timestamptz",
    id: "uuid",
    img: "String",
    name: "String",
    updatedAt: "timestamptz",
    walletId: "uuid",
  },
  account_min_fields: {
    clientId: "uuid",
    createdAt: "timestamptz",
    id: "uuid",
    img: "String",
    name: "String",
    updatedAt: "timestamptz",
    walletId: "uuid",
  },
  account_mutation_response: {
    affected_rows: "Int",
    returning: "account",
  },
  address: {
    bitcoin: "String",
    client: "client",
    client_id: "uuid",
    createdAt: "timestamptz",
    eth: "String",
    id: "uuid",
    sol: "String",
    updatedAt: "timestamptz",
    usdc: "String",
  },
  address_aggregate: {
    aggregate: "address_aggregate_fields",
    nodes: "address",
  },
  address_aggregate_fields: {
    count: "Int",
    max: "address_max_fields",
    min: "address_min_fields",
  },
  address_max_fields: {
    bitcoin: "String",
    client_id: "uuid",
    createdAt: "timestamptz",
    eth: "String",
    id: "uuid",
    sol: "String",
    updatedAt: "timestamptz",
    usdc: "String",
  },
  address_min_fields: {
    bitcoin: "String",
    client_id: "uuid",
    createdAt: "timestamptz",
    eth: "String",
    id: "uuid",
    sol: "String",
    updatedAt: "timestamptz",
    usdc: "String",
  },
  address_mutation_response: {
    affected_rows: "Int",
    returning: "address",
  },
  bigint: `scalar.bigint` as const,
  bitcoin: {
    account: "account",
    accountId: "uuid",
    createdAt: "timestamptz",
    id: "uuid",
    mainnetBtc: "float8",
    privateKey: "String",
    publicKey: "String",
    regtestBtc: "float8",
    textnetBtc: "float8",
    updatedAt: "timestamptz",
  },
  bitcoin_aggregate: {
    aggregate: "bitcoin_aggregate_fields",
    nodes: "bitcoin",
  },
  bitcoin_aggregate_fields: {
    avg: "bitcoin_avg_fields",
    count: "Int",
    max: "bitcoin_max_fields",
    min: "bitcoin_min_fields",
    stddev: "bitcoin_stddev_fields",
    stddev_pop: "bitcoin_stddev_pop_fields",
    stddev_samp: "bitcoin_stddev_samp_fields",
    sum: "bitcoin_sum_fields",
    var_pop: "bitcoin_var_pop_fields",
    var_samp: "bitcoin_var_samp_fields",
    variance: "bitcoin_variance_fields",
  },
  bitcoin_avg_fields: {
    mainnetBtc: "Float",
    regtestBtc: "Float",
    textnetBtc: "Float",
  },
  bitcoin_max_fields: {
    accountId: "uuid",
    createdAt: "timestamptz",
    id: "uuid",
    mainnetBtc: "float8",
    privateKey: "String",
    publicKey: "String",
    regtestBtc: "float8",
    textnetBtc: "float8",
    updatedAt: "timestamptz",
  },
  bitcoin_min_fields: {
    accountId: "uuid",
    createdAt: "timestamptz",
    id: "uuid",
    mainnetBtc: "float8",
    privateKey: "String",
    publicKey: "String",
    regtestBtc: "float8",
    textnetBtc: "float8",
    updatedAt: "timestamptz",
  },
  bitcoin_mutation_response: {
    affected_rows: "Int",
    returning: "bitcoin",
  },
  bitcoin_stddev_fields: {
    mainnetBtc: "Float",
    regtestBtc: "Float",
    textnetBtc: "Float",
  },
  bitcoin_stddev_pop_fields: {
    mainnetBtc: "Float",
    regtestBtc: "Float",
    textnetBtc: "Float",
  },
  bitcoin_stddev_samp_fields: {
    mainnetBtc: "Float",
    regtestBtc: "Float",
    textnetBtc: "Float",
  },
  bitcoin_sum_fields: {
    mainnetBtc: "float8",
    regtestBtc: "float8",
    textnetBtc: "float8",
  },
  bitcoin_var_pop_fields: {
    mainnetBtc: "Float",
    regtestBtc: "Float",
    textnetBtc: "Float",
  },
  bitcoin_var_samp_fields: {
    mainnetBtc: "Float",
    regtestBtc: "Float",
    textnetBtc: "Float",
  },
  bitcoin_variance_fields: {
    mainnetBtc: "Float",
    regtestBtc: "Float",
    textnetBtc: "Float",
  },
  chat: {
    client: "client",
    friendship: "friendship",
    friendshipId: "uuid",
    id: "uuid",
    message: "String",
    sendAt: "timestamptz",
    senderId: "uuid",
    updatedAt: "timestamptz",
  },
  chat_aggregate: {
    aggregate: "chat_aggregate_fields",
    nodes: "chat",
  },
  chat_aggregate_fields: {
    count: "Int",
    max: "chat_max_fields",
    min: "chat_min_fields",
  },
  chat_max_fields: {
    friendshipId: "uuid",
    id: "uuid",
    message: "String",
    sendAt: "timestamptz",
    senderId: "uuid",
    updatedAt: "timestamptz",
  },
  chat_min_fields: {
    friendshipId: "uuid",
    id: "uuid",
    message: "String",
    sendAt: "timestamptz",
    senderId: "uuid",
    updatedAt: "timestamptz",
  },
  chat_mutation_response: {
    affected_rows: "Int",
    returning: "chat",
  },
  client: {
    accounts: "account",
    accounts_aggregate: "account_aggregate",
    address: "address",
    chats: "chat",
    chats_aggregate: "chat_aggregate",
    createdAt: "timestamptz",
    email: "String",
    firstname: "String",
    friendships: "friendship",
    friendshipsByClientid2: "friendship",
    friendshipsByClientid2_aggregate: "friendship_aggregate",
    friendships_aggregate: "friendship_aggregate",
    id: "uuid",
    lastname: "String",
    mobile: "bigint",
    notifications: "notification",
    notifications_aggregate: "notification_aggregate",
    password: "String",
    transactions: "transactions",
    transactions_aggregate: "transactions_aggregate",
    updatedAt: "timestamptz",
    username: "String",
    valid: "Boolean",
    wallets: "wallet",
    wallets_aggregate: "wallet_aggregate",
  },
  client_aggregate: {
    aggregate: "client_aggregate_fields",
    nodes: "client",
  },
  client_aggregate_fields: {
    avg: "client_avg_fields",
    count: "Int",
    max: "client_max_fields",
    min: "client_min_fields",
    stddev: "client_stddev_fields",
    stddev_pop: "client_stddev_pop_fields",
    stddev_samp: "client_stddev_samp_fields",
    sum: "client_sum_fields",
    var_pop: "client_var_pop_fields",
    var_samp: "client_var_samp_fields",
    variance: "client_variance_fields",
  },
  client_avg_fields: {
    mobile: "Float",
  },
  client_max_fields: {
    createdAt: "timestamptz",
    email: "String",
    firstname: "String",
    id: "uuid",
    lastname: "String",
    mobile: "bigint",
    password: "String",
    updatedAt: "timestamptz",
    username: "String",
  },
  client_min_fields: {
    createdAt: "timestamptz",
    email: "String",
    firstname: "String",
    id: "uuid",
    lastname: "String",
    mobile: "bigint",
    password: "String",
    updatedAt: "timestamptz",
    username: "String",
  },
  client_mutation_response: {
    affected_rows: "Int",
    returning: "client",
  },
  client_stddev_fields: {
    mobile: "Float",
  },
  client_stddev_pop_fields: {
    mobile: "Float",
  },
  client_stddev_samp_fields: {
    mobile: "Float",
  },
  client_sum_fields: {
    mobile: "bigint",
  },
  client_var_pop_fields: {
    mobile: "Float",
  },
  client_var_samp_fields: {
    mobile: "Float",
  },
  client_variance_fields: {
    mobile: "Float",
  },
  eth: {
    account: "account",
    accountId: "uuid",
    createdAt: "timestamptz",
    goerliEth: "float8",
    id: "uuid",
    kovanEth: "float8",
    mainnetEth: "float8",
    privateKey: "String",
    publicKey: "String",
    rinkebyEth: "float8",
    ropstenEth: "float8",
    sepoliaEth: "float8",
    updatedAt: "timestamptz",
  },
  eth_aggregate: {
    aggregate: "eth_aggregate_fields",
    nodes: "eth",
  },
  eth_aggregate_fields: {
    avg: "eth_avg_fields",
    count: "Int",
    max: "eth_max_fields",
    min: "eth_min_fields",
    stddev: "eth_stddev_fields",
    stddev_pop: "eth_stddev_pop_fields",
    stddev_samp: "eth_stddev_samp_fields",
    sum: "eth_sum_fields",
    var_pop: "eth_var_pop_fields",
    var_samp: "eth_var_samp_fields",
    variance: "eth_variance_fields",
  },
  eth_avg_fields: {
    goerliEth: "Float",
    kovanEth: "Float",
    mainnetEth: "Float",
    rinkebyEth: "Float",
    ropstenEth: "Float",
    sepoliaEth: "Float",
  },
  eth_max_fields: {
    accountId: "uuid",
    createdAt: "timestamptz",
    goerliEth: "float8",
    id: "uuid",
    kovanEth: "float8",
    mainnetEth: "float8",
    privateKey: "String",
    publicKey: "String",
    rinkebyEth: "float8",
    ropstenEth: "float8",
    sepoliaEth: "float8",
    updatedAt: "timestamptz",
  },
  eth_min_fields: {
    accountId: "uuid",
    createdAt: "timestamptz",
    goerliEth: "float8",
    id: "uuid",
    kovanEth: "float8",
    mainnetEth: "float8",
    privateKey: "String",
    publicKey: "String",
    rinkebyEth: "float8",
    ropstenEth: "float8",
    sepoliaEth: "float8",
    updatedAt: "timestamptz",
  },
  eth_mutation_response: {
    affected_rows: "Int",
    returning: "eth",
  },
  eth_stddev_fields: {
    goerliEth: "Float",
    kovanEth: "Float",
    mainnetEth: "Float",
    rinkebyEth: "Float",
    ropstenEth: "Float",
    sepoliaEth: "Float",
  },
  eth_stddev_pop_fields: {
    goerliEth: "Float",
    kovanEth: "Float",
    mainnetEth: "Float",
    rinkebyEth: "Float",
    ropstenEth: "Float",
    sepoliaEth: "Float",
  },
  eth_stddev_samp_fields: {
    goerliEth: "Float",
    kovanEth: "Float",
    mainnetEth: "Float",
    rinkebyEth: "Float",
    ropstenEth: "Float",
    sepoliaEth: "Float",
  },
  eth_sum_fields: {
    goerliEth: "float8",
    kovanEth: "float8",
    mainnetEth: "float8",
    rinkebyEth: "float8",
    ropstenEth: "float8",
    sepoliaEth: "float8",
  },
  eth_var_pop_fields: {
    goerliEth: "Float",
    kovanEth: "Float",
    mainnetEth: "Float",
    rinkebyEth: "Float",
    ropstenEth: "Float",
    sepoliaEth: "Float",
  },
  eth_var_samp_fields: {
    goerliEth: "Float",
    kovanEth: "Float",
    mainnetEth: "Float",
    rinkebyEth: "Float",
    ropstenEth: "Float",
    sepoliaEth: "Float",
  },
  eth_variance_fields: {
    goerliEth: "Float",
    kovanEth: "Float",
    mainnetEth: "Float",
    rinkebyEth: "Float",
    ropstenEth: "Float",
    sepoliaEth: "Float",
  },
  float8: `scalar.float8` as const,
  friendship: {
    chats: "chat",
    chats_aggregate: "chat_aggregate",
    client1: "client",
    client2: "client",
    clientId1: "uuid",
    clientId2: "uuid",
    createdAt: "timestamptz",
    id: "uuid",
    status: "String",
    updatedAt: "timestamptz",
  },
  friendship_aggregate: {
    aggregate: "friendship_aggregate_fields",
    nodes: "friendship",
  },
  friendship_aggregate_fields: {
    count: "Int",
    max: "friendship_max_fields",
    min: "friendship_min_fields",
  },
  friendship_max_fields: {
    clientId1: "uuid",
    clientId2: "uuid",
    createdAt: "timestamptz",
    id: "uuid",
    status: "String",
    updatedAt: "timestamptz",
  },
  friendship_min_fields: {
    clientId1: "uuid",
    clientId2: "uuid",
    createdAt: "timestamptz",
    id: "uuid",
    status: "String",
    updatedAt: "timestamptz",
  },
  friendship_mutation_response: {
    affected_rows: "Int",
    returning: "friendship",
  },
  mutation_root: {
    delete_account: "account_mutation_response",
    delete_account_by_pk: "account",
    delete_address: "address_mutation_response",
    delete_address_by_pk: "address",
    delete_bitcoin: "bitcoin_mutation_response",
    delete_bitcoin_by_pk: "bitcoin",
    delete_chat: "chat_mutation_response",
    delete_chat_by_pk: "chat",
    delete_client: "client_mutation_response",
    delete_client_by_pk: "client",
    delete_eth: "eth_mutation_response",
    delete_eth_by_pk: "eth",
    delete_friendship: "friendship_mutation_response",
    delete_friendship_by_pk: "friendship",
    delete_notification: "notification_mutation_response",
    delete_notification_by_pk: "notification",
    delete_notification_subscription:
      "notification_subscription_mutation_response",
    delete_notification_subscription_by_pk: "notification_subscription",
    delete_sol: "sol_mutation_response",
    delete_sol_by_pk: "sol",
    delete_transactions: "transactions_mutation_response",
    delete_transactions_by_pk: "transactions",
    delete_wallet: "wallet_mutation_response",
    delete_wallet_by_pk: "wallet",
    insert_account: "account_mutation_response",
    insert_account_one: "account",
    insert_address: "address_mutation_response",
    insert_address_one: "address",
    insert_bitcoin: "bitcoin_mutation_response",
    insert_bitcoin_one: "bitcoin",
    insert_chat: "chat_mutation_response",
    insert_chat_one: "chat",
    insert_client: "client_mutation_response",
    insert_client_one: "client",
    insert_eth: "eth_mutation_response",
    insert_eth_one: "eth",
    insert_friendship: "friendship_mutation_response",
    insert_friendship_one: "friendship",
    insert_notification: "notification_mutation_response",
    insert_notification_one: "notification",
    insert_notification_subscription:
      "notification_subscription_mutation_response",
    insert_notification_subscription_one: "notification_subscription",
    insert_sol: "sol_mutation_response",
    insert_sol_one: "sol",
    insert_transactions: "transactions_mutation_response",
    insert_transactions_one: "transactions",
    insert_wallet: "wallet_mutation_response",
    insert_wallet_one: "wallet",
    update_account: "account_mutation_response",
    update_account_by_pk: "account",
    update_account_many: "account_mutation_response",
    update_address: "address_mutation_response",
    update_address_by_pk: "address",
    update_address_many: "address_mutation_response",
    update_bitcoin: "bitcoin_mutation_response",
    update_bitcoin_by_pk: "bitcoin",
    update_bitcoin_many: "bitcoin_mutation_response",
    update_chat: "chat_mutation_response",
    update_chat_by_pk: "chat",
    update_chat_many: "chat_mutation_response",
    update_client: "client_mutation_response",
    update_client_by_pk: "client",
    update_client_many: "client_mutation_response",
    update_eth: "eth_mutation_response",
    update_eth_by_pk: "eth",
    update_eth_many: "eth_mutation_response",
    update_friendship: "friendship_mutation_response",
    update_friendship_by_pk: "friendship",
    update_friendship_many: "friendship_mutation_response",
    update_notification: "notification_mutation_response",
    update_notification_by_pk: "notification",
    update_notification_many: "notification_mutation_response",
    update_notification_subscription:
      "notification_subscription_mutation_response",
    update_notification_subscription_by_pk: "notification_subscription",
    update_notification_subscription_many:
      "notification_subscription_mutation_response",
    update_sol: "sol_mutation_response",
    update_sol_by_pk: "sol",
    update_sol_many: "sol_mutation_response",
    update_transactions: "transactions_mutation_response",
    update_transactions_by_pk: "transactions",
    update_transactions_many: "transactions_mutation_response",
    update_wallet: "wallet_mutation_response",
    update_wallet_by_pk: "wallet",
    update_wallet_many: "wallet_mutation_response",
  },
  notification: {
    body: "String",
    client: "client",
    clientId: "uuid",
    id: "uuid",
    image: "String",
    timestamp: "timestamp",
    title: "String",
    updatedAt: "timestamptz",
    uuid: "uuid",
    viewed: "Boolean",
  },
  notification_aggregate: {
    aggregate: "notification_aggregate_fields",
    nodes: "notification",
  },
  notification_aggregate_fields: {
    count: "Int",
    max: "notification_max_fields",
    min: "notification_min_fields",
  },
  notification_max_fields: {
    body: "String",
    clientId: "uuid",
    id: "uuid",
    image: "String",
    timestamp: "timestamp",
    title: "String",
    updatedAt: "timestamptz",
    uuid: "uuid",
  },
  notification_min_fields: {
    body: "String",
    clientId: "uuid",
    id: "uuid",
    image: "String",
    timestamp: "timestamp",
    title: "String",
    updatedAt: "timestamptz",
    uuid: "uuid",
  },
  notification_mutation_response: {
    affected_rows: "Int",
    returning: "notification",
  },
  notification_subscription: {
    auth: "String",
    clientId: "uuid",
    endpoint: "String",
    expirationTime: "timestamptz",
    id: "uuid",
    p256dh: "String",
    public_key: "String",
    updatedAt: "timestamptz",
    uuid: "uuid",
  },
  notification_subscription_aggregate: {
    aggregate: "notification_subscription_aggregate_fields",
    nodes: "notification_subscription",
  },
  notification_subscription_aggregate_fields: {
    count: "Int",
    max: "notification_subscription_max_fields",
    min: "notification_subscription_min_fields",
  },
  notification_subscription_max_fields: {
    auth: "String",
    clientId: "uuid",
    endpoint: "String",
    expirationTime: "timestamptz",
    id: "uuid",
    p256dh: "String",
    public_key: "String",
    updatedAt: "timestamptz",
    uuid: "uuid",
  },
  notification_subscription_min_fields: {
    auth: "String",
    clientId: "uuid",
    endpoint: "String",
    expirationTime: "timestamptz",
    id: "uuid",
    p256dh: "String",
    public_key: "String",
    updatedAt: "timestamptz",
    uuid: "uuid",
  },
  notification_subscription_mutation_response: {
    affected_rows: "Int",
    returning: "notification_subscription",
  },
  query_root: {
    account: "account",
    account_aggregate: "account_aggregate",
    account_by_pk: "account",
    address: "address",
    address_aggregate: "address_aggregate",
    address_by_pk: "address",
    bitcoin: "bitcoin",
    bitcoin_aggregate: "bitcoin_aggregate",
    bitcoin_by_pk: "bitcoin",
    chat: "chat",
    chat_aggregate: "chat_aggregate",
    chat_by_pk: "chat",
    client: "client",
    client_aggregate: "client_aggregate",
    client_by_pk: "client",
    eth: "eth",
    eth_aggregate: "eth_aggregate",
    eth_by_pk: "eth",
    friendship: "friendship",
    friendship_aggregate: "friendship_aggregate",
    friendship_by_pk: "friendship",
    notification: "notification",
    notification_aggregate: "notification_aggregate",
    notification_by_pk: "notification",
    notification_subscription: "notification_subscription",
    notification_subscription_aggregate: "notification_subscription_aggregate",
    notification_subscription_by_pk: "notification_subscription",
    sol: "sol",
    sol_aggregate: "sol_aggregate",
    sol_by_pk: "sol",
    transactions: "transactions",
    transactions_aggregate: "transactions_aggregate",
    transactions_by_pk: "transactions",
    wallet: "wallet",
    wallet_aggregate: "wallet_aggregate",
    wallet_by_pk: "wallet",
  },
  sol: {
    account: "account",
    accountId: "uuid",
    createdAt: "timestamptz",
    devnetSol: "float8",
    id: "uuid",
    mainnetSol: "float8",
    privateKey: "String",
    publicKey: "String",
    testnetSol: "float8",
    updatedAt: "timestamptz",
  },
  sol_aggregate: {
    aggregate: "sol_aggregate_fields",
    nodes: "sol",
  },
  sol_aggregate_fields: {
    avg: "sol_avg_fields",
    count: "Int",
    max: "sol_max_fields",
    min: "sol_min_fields",
    stddev: "sol_stddev_fields",
    stddev_pop: "sol_stddev_pop_fields",
    stddev_samp: "sol_stddev_samp_fields",
    sum: "sol_sum_fields",
    var_pop: "sol_var_pop_fields",
    var_samp: "sol_var_samp_fields",
    variance: "sol_variance_fields",
  },
  sol_avg_fields: {
    devnetSol: "Float",
    mainnetSol: "Float",
    testnetSol: "Float",
  },
  sol_max_fields: {
    accountId: "uuid",
    createdAt: "timestamptz",
    devnetSol: "float8",
    id: "uuid",
    mainnetSol: "float8",
    privateKey: "String",
    publicKey: "String",
    testnetSol: "float8",
    updatedAt: "timestamptz",
  },
  sol_min_fields: {
    accountId: "uuid",
    createdAt: "timestamptz",
    devnetSol: "float8",
    id: "uuid",
    mainnetSol: "float8",
    privateKey: "String",
    publicKey: "String",
    testnetSol: "float8",
    updatedAt: "timestamptz",
  },
  sol_mutation_response: {
    affected_rows: "Int",
    returning: "sol",
  },
  sol_stddev_fields: {
    devnetSol: "Float",
    mainnetSol: "Float",
    testnetSol: "Float",
  },
  sol_stddev_pop_fields: {
    devnetSol: "Float",
    mainnetSol: "Float",
    testnetSol: "Float",
  },
  sol_stddev_samp_fields: {
    devnetSol: "Float",
    mainnetSol: "Float",
    testnetSol: "Float",
  },
  sol_sum_fields: {
    devnetSol: "float8",
    mainnetSol: "float8",
    testnetSol: "float8",
  },
  sol_var_pop_fields: {
    devnetSol: "Float",
    mainnetSol: "Float",
    testnetSol: "Float",
  },
  sol_var_samp_fields: {
    devnetSol: "Float",
    mainnetSol: "Float",
    testnetSol: "Float",
  },
  sol_variance_fields: {
    devnetSol: "Float",
    mainnetSol: "Float",
    testnetSol: "Float",
  },
  subscription_root: {
    account: "account",
    account_aggregate: "account_aggregate",
    account_by_pk: "account",
    account_stream: "account",
    address: "address",
    address_aggregate: "address_aggregate",
    address_by_pk: "address",
    address_stream: "address",
    bitcoin: "bitcoin",
    bitcoin_aggregate: "bitcoin_aggregate",
    bitcoin_by_pk: "bitcoin",
    bitcoin_stream: "bitcoin",
    chat: "chat",
    chat_aggregate: "chat_aggregate",
    chat_by_pk: "chat",
    chat_stream: "chat",
    client: "client",
    client_aggregate: "client_aggregate",
    client_by_pk: "client",
    client_stream: "client",
    eth: "eth",
    eth_aggregate: "eth_aggregate",
    eth_by_pk: "eth",
    eth_stream: "eth",
    friendship: "friendship",
    friendship_aggregate: "friendship_aggregate",
    friendship_by_pk: "friendship",
    friendship_stream: "friendship",
    notification: "notification",
    notification_aggregate: "notification_aggregate",
    notification_by_pk: "notification",
    notification_stream: "notification",
    notification_subscription: "notification_subscription",
    notification_subscription_aggregate: "notification_subscription_aggregate",
    notification_subscription_by_pk: "notification_subscription",
    notification_subscription_stream: "notification_subscription",
    sol: "sol",
    sol_aggregate: "sol_aggregate",
    sol_by_pk: "sol",
    sol_stream: "sol",
    transactions: "transactions",
    transactions_aggregate: "transactions_aggregate",
    transactions_by_pk: "transactions",
    transactions_stream: "transactions",
    wallet: "wallet",
    wallet_aggregate: "wallet_aggregate",
    wallet_by_pk: "wallet",
    wallet_stream: "wallet",
  },
  timestamp: `scalar.timestamp` as const,
  timestamptz: `scalar.timestamptz` as const,
  transactions: {
    amount: "float8",
    blockHash: "String",
    chainId: "bigint",
    client: "client",
    clientId: "uuid",
    cluster: "String",
    createdAt: "timestamptz",
    fee: "float8",
    from: "String",
    hash: "String",
    id: "uuid",
    network: "String",
    nonce: "bigint",
    slot: "bigint",
    status: "String",
    time: "timestamptz",
    to: "String",
    updatedAt: "timestamptz",
  },
  transactions_aggregate: {
    aggregate: "transactions_aggregate_fields",
    nodes: "transactions",
  },
  transactions_aggregate_fields: {
    avg: "transactions_avg_fields",
    count: "Int",
    max: "transactions_max_fields",
    min: "transactions_min_fields",
    stddev: "transactions_stddev_fields",
    stddev_pop: "transactions_stddev_pop_fields",
    stddev_samp: "transactions_stddev_samp_fields",
    sum: "transactions_sum_fields",
    var_pop: "transactions_var_pop_fields",
    var_samp: "transactions_var_samp_fields",
    variance: "transactions_variance_fields",
  },
  transactions_avg_fields: {
    amount: "Float",
    chainId: "Float",
    fee: "Float",
    nonce: "Float",
    slot: "Float",
  },
  transactions_max_fields: {
    amount: "float8",
    blockHash: "String",
    chainId: "bigint",
    clientId: "uuid",
    cluster: "String",
    createdAt: "timestamptz",
    fee: "float8",
    from: "String",
    hash: "String",
    id: "uuid",
    network: "String",
    nonce: "bigint",
    slot: "bigint",
    status: "String",
    time: "timestamptz",
    to: "String",
    updatedAt: "timestamptz",
  },
  transactions_min_fields: {
    amount: "float8",
    blockHash: "String",
    chainId: "bigint",
    clientId: "uuid",
    cluster: "String",
    createdAt: "timestamptz",
    fee: "float8",
    from: "String",
    hash: "String",
    id: "uuid",
    network: "String",
    nonce: "bigint",
    slot: "bigint",
    status: "String",
    time: "timestamptz",
    to: "String",
    updatedAt: "timestamptz",
  },
  transactions_mutation_response: {
    affected_rows: "Int",
    returning: "transactions",
  },
  transactions_stddev_fields: {
    amount: "Float",
    chainId: "Float",
    fee: "Float",
    nonce: "Float",
    slot: "Float",
  },
  transactions_stddev_pop_fields: {
    amount: "Float",
    chainId: "Float",
    fee: "Float",
    nonce: "Float",
    slot: "Float",
  },
  transactions_stddev_samp_fields: {
    amount: "Float",
    chainId: "Float",
    fee: "Float",
    nonce: "Float",
    slot: "Float",
  },
  transactions_sum_fields: {
    amount: "float8",
    chainId: "bigint",
    fee: "float8",
    nonce: "bigint",
    slot: "bigint",
  },
  transactions_var_pop_fields: {
    amount: "Float",
    chainId: "Float",
    fee: "Float",
    nonce: "Float",
    slot: "Float",
  },
  transactions_var_samp_fields: {
    amount: "Float",
    chainId: "Float",
    fee: "Float",
    nonce: "Float",
    slot: "Float",
  },
  transactions_variance_fields: {
    amount: "Float",
    chainId: "Float",
    fee: "Float",
    nonce: "Float",
    slot: "Float",
  },
  uuid: `scalar.uuid` as const,
  wallet: {
    accounts: "account",
    accounts_aggregate: "account_aggregate",
    client: "client",
    clientId: "uuid",
    createdAt: "timestamptz",
    id: "uuid",
    secretPhase: "String",
    updatedAt: "timestamptz",
  },
  wallet_aggregate: {
    aggregate: "wallet_aggregate_fields",
    nodes: "wallet",
  },
  wallet_aggregate_fields: {
    count: "Int",
    max: "wallet_max_fields",
    min: "wallet_min_fields",
  },
  wallet_max_fields: {
    clientId: "uuid",
    createdAt: "timestamptz",
    id: "uuid",
    secretPhase: "String",
    updatedAt: "timestamptz",
  },
  wallet_min_fields: {
    clientId: "uuid",
    createdAt: "timestamptz",
    id: "uuid",
    secretPhase: "String",
    updatedAt: "timestamptz",
  },
  wallet_mutation_response: {
    affected_rows: "Int",
    returning: "wallet",
  },
};

export const Ops = {
  query: "query_root" as const,
  mutation: "mutation_root" as const,
  subscription: "subscription_root" as const,
};
